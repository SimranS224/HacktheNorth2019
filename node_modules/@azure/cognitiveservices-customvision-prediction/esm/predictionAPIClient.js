/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign, __extends } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { PredictionAPIClientContext } from "./predictionAPIClientContext";
var PredictionAPIClient = /** @class */ (function (_super) {
    __extends(PredictionAPIClient, _super);
    /**
     * Initializes a new instance of the PredictionAPIClient class.
     * @param apiKey API key.
     * @param endpoint Supported Cognitive Services endpoints.
     * @param [options] The parameter options
     */
    function PredictionAPIClient(apiKey, endpoint, options) {
        return _super.call(this, apiKey, endpoint, options) || this;
    }
    PredictionAPIClient.prototype.classifyImageUrl = function (projectId, publishedName, imageUrl, options, callback) {
        return this.sendOperationRequest({
            projectId: projectId,
            publishedName: publishedName,
            imageUrl: imageUrl,
            options: options
        }, classifyImageUrlOperationSpec, callback);
    };
    PredictionAPIClient.prototype.classifyImage = function (projectId, publishedName, imageData, options, callback) {
        return this.sendOperationRequest({
            projectId: projectId,
            publishedName: publishedName,
            imageData: imageData,
            options: options
        }, classifyImageOperationSpec, callback);
    };
    PredictionAPIClient.prototype.classifyImageUrlWithNoStore = function (projectId, publishedName, imageUrl, options, callback) {
        return this.sendOperationRequest({
            projectId: projectId,
            publishedName: publishedName,
            imageUrl: imageUrl,
            options: options
        }, classifyImageUrlWithNoStoreOperationSpec, callback);
    };
    PredictionAPIClient.prototype.classifyImageWithNoStore = function (projectId, publishedName, imageData, options, callback) {
        return this.sendOperationRequest({
            projectId: projectId,
            publishedName: publishedName,
            imageData: imageData,
            options: options
        }, classifyImageWithNoStoreOperationSpec, callback);
    };
    PredictionAPIClient.prototype.detectImageUrl = function (projectId, publishedName, imageUrl, options, callback) {
        return this.sendOperationRequest({
            projectId: projectId,
            publishedName: publishedName,
            imageUrl: imageUrl,
            options: options
        }, detectImageUrlOperationSpec, callback);
    };
    PredictionAPIClient.prototype.detectImage = function (projectId, publishedName, imageData, options, callback) {
        return this.sendOperationRequest({
            projectId: projectId,
            publishedName: publishedName,
            imageData: imageData,
            options: options
        }, detectImageOperationSpec, callback);
    };
    PredictionAPIClient.prototype.detectImageUrlWithNoStore = function (projectId, publishedName, imageUrl, options, callback) {
        return this.sendOperationRequest({
            projectId: projectId,
            publishedName: publishedName,
            imageUrl: imageUrl,
            options: options
        }, detectImageUrlWithNoStoreOperationSpec, callback);
    };
    PredictionAPIClient.prototype.detectImageWithNoStore = function (projectId, publishedName, imageData, options, callback) {
        return this.sendOperationRequest({
            projectId: projectId,
            publishedName: publishedName,
            imageData: imageData,
            options: options
        }, detectImageWithNoStoreOperationSpec, callback);
    };
    return PredictionAPIClient;
}(PredictionAPIClientContext));
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var classifyImageUrlOperationSpec = {
    httpMethod: "POST",
    path: "{projectId}/classify/iterations/{publishedName}/url",
    urlParameters: [
        Parameters.endpoint,
        Parameters.projectId,
        Parameters.publishedName
    ],
    queryParameters: [
        Parameters.application
    ],
    headerParameters: [
        Parameters.apiKey
    ],
    requestBody: {
        parameterPath: "imageUrl",
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ImagePrediction
        },
        default: {
            bodyMapper: Mappers.CustomVisionError
        }
    },
    serializer: serializer
};
var classifyImageOperationSpec = {
    httpMethod: "POST",
    path: "{projectId}/classify/iterations/{publishedName}/image",
    urlParameters: [
        Parameters.endpoint,
        Parameters.projectId,
        Parameters.publishedName
    ],
    queryParameters: [
        Parameters.application
    ],
    headerParameters: [
        Parameters.apiKey
    ],
    formDataParameters: [
        Parameters.imageData
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: Mappers.ImagePrediction
        },
        default: {
            bodyMapper: Mappers.CustomVisionError
        }
    },
    serializer: serializer
};
var classifyImageUrlWithNoStoreOperationSpec = {
    httpMethod: "POST",
    path: "{projectId}/classify/iterations/{publishedName}/url/nostore",
    urlParameters: [
        Parameters.endpoint,
        Parameters.projectId,
        Parameters.publishedName
    ],
    queryParameters: [
        Parameters.application
    ],
    headerParameters: [
        Parameters.apiKey
    ],
    requestBody: {
        parameterPath: "imageUrl",
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ImagePrediction
        },
        default: {
            bodyMapper: Mappers.CustomVisionError
        }
    },
    serializer: serializer
};
var classifyImageWithNoStoreOperationSpec = {
    httpMethod: "POST",
    path: "{projectId}/classify/iterations/{publishedName}/image/nostore",
    urlParameters: [
        Parameters.endpoint,
        Parameters.projectId,
        Parameters.publishedName
    ],
    queryParameters: [
        Parameters.application
    ],
    headerParameters: [
        Parameters.apiKey
    ],
    formDataParameters: [
        Parameters.imageData
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: Mappers.ImagePrediction
        },
        default: {
            bodyMapper: Mappers.CustomVisionError
        }
    },
    serializer: serializer
};
var detectImageUrlOperationSpec = {
    httpMethod: "POST",
    path: "{projectId}/detect/iterations/{publishedName}/url",
    urlParameters: [
        Parameters.endpoint,
        Parameters.projectId,
        Parameters.publishedName
    ],
    queryParameters: [
        Parameters.application
    ],
    headerParameters: [
        Parameters.apiKey
    ],
    requestBody: {
        parameterPath: "imageUrl",
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ImagePrediction
        },
        default: {
            bodyMapper: Mappers.CustomVisionError
        }
    },
    serializer: serializer
};
var detectImageOperationSpec = {
    httpMethod: "POST",
    path: "{projectId}/detect/iterations/{publishedName}/image",
    urlParameters: [
        Parameters.endpoint,
        Parameters.projectId,
        Parameters.publishedName
    ],
    queryParameters: [
        Parameters.application
    ],
    headerParameters: [
        Parameters.apiKey
    ],
    formDataParameters: [
        Parameters.imageData
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: Mappers.ImagePrediction
        },
        default: {
            bodyMapper: Mappers.CustomVisionError
        }
    },
    serializer: serializer
};
var detectImageUrlWithNoStoreOperationSpec = {
    httpMethod: "POST",
    path: "{projectId}/detect/iterations/{publishedName}/url/nostore",
    urlParameters: [
        Parameters.endpoint,
        Parameters.projectId,
        Parameters.publishedName
    ],
    queryParameters: [
        Parameters.application
    ],
    headerParameters: [
        Parameters.apiKey
    ],
    requestBody: {
        parameterPath: "imageUrl",
        mapper: __assign(__assign({}, Mappers.ImageUrl), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ImagePrediction
        },
        default: {
            bodyMapper: Mappers.CustomVisionError
        }
    },
    serializer: serializer
};
var detectImageWithNoStoreOperationSpec = {
    httpMethod: "POST",
    path: "{projectId}/detect/iterations/{publishedName}/image/nostore",
    urlParameters: [
        Parameters.endpoint,
        Parameters.projectId,
        Parameters.publishedName
    ],
    queryParameters: [
        Parameters.application
    ],
    headerParameters: [
        Parameters.apiKey
    ],
    formDataParameters: [
        Parameters.imageData
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: Mappers.ImagePrediction
        },
        default: {
            bodyMapper: Mappers.CustomVisionError
        }
    },
    serializer: serializer
};
export { PredictionAPIClient, PredictionAPIClientContext, Models as PredictionAPIModels, Mappers as PredictionAPIMappers };
//# sourceMappingURL=predictionAPIClient.js.map