/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesCustomvisionPrediction = {}), global.msRest));
}(this, function (exports, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var ImageUrl = {
        serializedName: "ImageUrl",
        type: {
            name: "Composite",
            className: "ImageUrl",
            modelProperties: {
                url: {
                    required: true,
                    nullable: false,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BoundingBox = {
        serializedName: "BoundingBox",
        type: {
            name: "Composite",
            className: "BoundingBox",
            modelProperties: {
                left: {
                    required: true,
                    nullable: false,
                    serializedName: "left",
                    type: {
                        name: "Number"
                    }
                },
                top: {
                    required: true,
                    nullable: false,
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                },
                width: {
                    required: true,
                    nullable: false,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    required: true,
                    nullable: false,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Prediction = {
        serializedName: "Prediction",
        type: {
            name: "Composite",
            className: "Prediction",
            modelProperties: {
                probability: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "probability",
                    type: {
                        name: "Number"
                    }
                },
                tagId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "tagId",
                    type: {
                        name: "Uuid"
                    }
                },
                tagName: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "tagName",
                    type: {
                        name: "String"
                    }
                },
                boundingBox: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "boundingBox",
                    type: {
                        name: "Composite",
                        className: "BoundingBox"
                    }
                }
            }
        }
    };
    var ImagePrediction = {
        serializedName: "ImagePrediction",
        type: {
            name: "Composite",
            className: "ImagePrediction",
            modelProperties: {
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                project: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "project",
                    type: {
                        name: "Uuid"
                    }
                },
                iteration: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "iteration",
                    type: {
                        name: "Uuid"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                predictions: {
                    readOnly: true,
                    serializedName: "predictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Prediction"
                            }
                        }
                    }
                }
            }
        }
    };
    var CustomVisionError = {
        serializedName: "CustomVisionError",
        type: {
            name: "Composite",
            className: "CustomVisionError",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        ImageUrl: ImageUrl,
        BoundingBox: BoundingBox,
        Prediction: Prediction,
        ImagePrediction: ImagePrediction,
        CustomVisionError: CustomVisionError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var apiKey = {
        parameterPath: "apiKey",
        mapper: {
            required: true,
            serializedName: "Prediction-Key",
            type: {
                name: "String"
            }
        }
    };
    var application = {
        parameterPath: [
            "options",
            "application"
        ],
        mapper: {
            serializedName: "application",
            type: {
                name: "String"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var imageData = {
        parameterPath: "imageData",
        mapper: {
            required: true,
            serializedName: "imageData",
            type: {
                name: "Stream"
            }
        }
    };
    var projectId = {
        parameterPath: "projectId",
        mapper: {
            required: true,
            serializedName: "projectId",
            type: {
                name: "Uuid"
            }
        }
    };
    var publishedName = {
        parameterPath: "publishedName",
        mapper: {
            required: true,
            serializedName: "publishedName",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-customvision-prediction";
    var packageVersion = "4.0.0";
    var PredictionAPIClientContext = /** @class */ (function (_super) {
        __extends(PredictionAPIClientContext, _super);
        /**
         * Initializes a new instance of the PredictionAPIClientContext class.
         * @param apiKey API key.
         * @param endpoint Supported Cognitive Services endpoints.
         * @param [options] The parameter options
         */
        function PredictionAPIClientContext(apiKey, endpoint, options) {
            var _this = this;
            if (apiKey == undefined) {
                throw new Error("'apiKey' cannot be null.");
            }
            if (endpoint == undefined) {
                throw new Error("'endpoint' cannot be null.");
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRest.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, undefined, options) || this;
            _this.baseUri = "{Endpoint}/customvision/v3.0/prediction";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.apiKey = apiKey;
            _this.endpoint = endpoint;
            return _this;
        }
        return PredictionAPIClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var PredictionAPIClient = /** @class */ (function (_super) {
        __extends(PredictionAPIClient, _super);
        /**
         * Initializes a new instance of the PredictionAPIClient class.
         * @param apiKey API key.
         * @param endpoint Supported Cognitive Services endpoints.
         * @param [options] The parameter options
         */
        function PredictionAPIClient(apiKey, endpoint, options) {
            return _super.call(this, apiKey, endpoint, options) || this;
        }
        PredictionAPIClient.prototype.classifyImageUrl = function (projectId, publishedName, imageUrl, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                publishedName: publishedName,
                imageUrl: imageUrl,
                options: options
            }, classifyImageUrlOperationSpec, callback);
        };
        PredictionAPIClient.prototype.classifyImage = function (projectId, publishedName, imageData, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                publishedName: publishedName,
                imageData: imageData,
                options: options
            }, classifyImageOperationSpec, callback);
        };
        PredictionAPIClient.prototype.classifyImageUrlWithNoStore = function (projectId, publishedName, imageUrl, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                publishedName: publishedName,
                imageUrl: imageUrl,
                options: options
            }, classifyImageUrlWithNoStoreOperationSpec, callback);
        };
        PredictionAPIClient.prototype.classifyImageWithNoStore = function (projectId, publishedName, imageData, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                publishedName: publishedName,
                imageData: imageData,
                options: options
            }, classifyImageWithNoStoreOperationSpec, callback);
        };
        PredictionAPIClient.prototype.detectImageUrl = function (projectId, publishedName, imageUrl, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                publishedName: publishedName,
                imageUrl: imageUrl,
                options: options
            }, detectImageUrlOperationSpec, callback);
        };
        PredictionAPIClient.prototype.detectImage = function (projectId, publishedName, imageData, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                publishedName: publishedName,
                imageData: imageData,
                options: options
            }, detectImageOperationSpec, callback);
        };
        PredictionAPIClient.prototype.detectImageUrlWithNoStore = function (projectId, publishedName, imageUrl, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                publishedName: publishedName,
                imageUrl: imageUrl,
                options: options
            }, detectImageUrlWithNoStoreOperationSpec, callback);
        };
        PredictionAPIClient.prototype.detectImageWithNoStore = function (projectId, publishedName, imageData, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                publishedName: publishedName,
                imageData: imageData,
                options: options
            }, detectImageWithNoStoreOperationSpec, callback);
        };
        return PredictionAPIClient;
    }(PredictionAPIClientContext));
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var classifyImageUrlOperationSpec = {
        httpMethod: "POST",
        path: "{projectId}/classify/iterations/{publishedName}/url",
        urlParameters: [
            endpoint,
            projectId,
            publishedName
        ],
        queryParameters: [
            application
        ],
        headerParameters: [
            apiKey
        ],
        requestBody: {
            parameterPath: "imageUrl",
            mapper: __assign(__assign({}, ImageUrl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImagePrediction
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var classifyImageOperationSpec = {
        httpMethod: "POST",
        path: "{projectId}/classify/iterations/{publishedName}/image",
        urlParameters: [
            endpoint,
            projectId,
            publishedName
        ],
        queryParameters: [
            application
        ],
        headerParameters: [
            apiKey
        ],
        formDataParameters: [
            imageData
        ],
        contentType: "multipart/form-data",
        responses: {
            200: {
                bodyMapper: ImagePrediction
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var classifyImageUrlWithNoStoreOperationSpec = {
        httpMethod: "POST",
        path: "{projectId}/classify/iterations/{publishedName}/url/nostore",
        urlParameters: [
            endpoint,
            projectId,
            publishedName
        ],
        queryParameters: [
            application
        ],
        headerParameters: [
            apiKey
        ],
        requestBody: {
            parameterPath: "imageUrl",
            mapper: __assign(__assign({}, ImageUrl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImagePrediction
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var classifyImageWithNoStoreOperationSpec = {
        httpMethod: "POST",
        path: "{projectId}/classify/iterations/{publishedName}/image/nostore",
        urlParameters: [
            endpoint,
            projectId,
            publishedName
        ],
        queryParameters: [
            application
        ],
        headerParameters: [
            apiKey
        ],
        formDataParameters: [
            imageData
        ],
        contentType: "multipart/form-data",
        responses: {
            200: {
                bodyMapper: ImagePrediction
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var detectImageUrlOperationSpec = {
        httpMethod: "POST",
        path: "{projectId}/detect/iterations/{publishedName}/url",
        urlParameters: [
            endpoint,
            projectId,
            publishedName
        ],
        queryParameters: [
            application
        ],
        headerParameters: [
            apiKey
        ],
        requestBody: {
            parameterPath: "imageUrl",
            mapper: __assign(__assign({}, ImageUrl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImagePrediction
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var detectImageOperationSpec = {
        httpMethod: "POST",
        path: "{projectId}/detect/iterations/{publishedName}/image",
        urlParameters: [
            endpoint,
            projectId,
            publishedName
        ],
        queryParameters: [
            application
        ],
        headerParameters: [
            apiKey
        ],
        formDataParameters: [
            imageData
        ],
        contentType: "multipart/form-data",
        responses: {
            200: {
                bodyMapper: ImagePrediction
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var detectImageUrlWithNoStoreOperationSpec = {
        httpMethod: "POST",
        path: "{projectId}/detect/iterations/{publishedName}/url/nostore",
        urlParameters: [
            endpoint,
            projectId,
            publishedName
        ],
        queryParameters: [
            application
        ],
        headerParameters: [
            apiKey
        ],
        requestBody: {
            parameterPath: "imageUrl",
            mapper: __assign(__assign({}, ImageUrl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImagePrediction
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var detectImageWithNoStoreOperationSpec = {
        httpMethod: "POST",
        path: "{projectId}/detect/iterations/{publishedName}/image/nostore",
        urlParameters: [
            endpoint,
            projectId,
            publishedName
        ],
        queryParameters: [
            application
        ],
        headerParameters: [
            apiKey
        ],
        formDataParameters: [
            imageData
        ],
        contentType: "multipart/form-data",
        responses: {
            200: {
                bodyMapper: ImagePrediction
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };

    exports.PredictionAPIClient = PredictionAPIClient;
    exports.PredictionAPIClientContext = PredictionAPIClientContext;
    exports.PredictionAPIMappers = Mappers;
    exports.PredictionAPIModels = index;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=cognitiveservices-customvision-prediction.js.map
