{"version":3,"file":"cognitiveservices-customvision-prediction.js","sources":["../node_modules/tslib/tslib.es6.js","../src/models/index.ts","../src/models/mappers.ts","../src/models/parameters.ts","../src/predictionAPIClientContext.ts","../src/predictionAPIClient.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n/**\n * Image url.\n */\nexport interface ImageUrl {\n  /**\n   * Url of the image.\n   */\n  url: string;\n}\n\n/**\n * Bounding box that defines a region of an image.\n */\nexport interface BoundingBox {\n  /**\n   * Coordinate of the left boundary.\n   */\n  left: number;\n  /**\n   * Coordinate of the top boundary.\n   */\n  top: number;\n  /**\n   * Width.\n   */\n  width: number;\n  /**\n   * Height.\n   */\n  height: number;\n}\n\n/**\n * Prediction result.\n */\nexport interface Prediction {\n  /**\n   * Probability of the tag.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly probability?: number;\n  /**\n   * Id of the predicted tag.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly tagId?: string;\n  /**\n   * Name of the predicted tag.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly tagName?: string;\n  /**\n   * Bounding box of the prediction.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly boundingBox?: BoundingBox;\n}\n\n/**\n * Result of an image prediction request.\n */\nexport interface ImagePrediction {\n  /**\n   * Prediction Id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * Project Id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly project?: string;\n  /**\n   * Iteration Id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly iteration?: string;\n  /**\n   * Date this prediction was created.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n  /**\n   * List of predictions.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly predictions?: Prediction[];\n}\n\n/**\n * An interface representing CustomVisionError.\n */\nexport interface CustomVisionError {\n  /**\n   * The error code. Possible values include: 'NoError', 'BadRequest',\n   * 'BadRequestExceededBatchSize', 'BadRequestNotSupported', 'BadRequestInvalidIds',\n   * 'BadRequestProjectName', 'BadRequestProjectNameNotUnique', 'BadRequestProjectDescription',\n   * 'BadRequestProjectUnknownDomain', 'BadRequestProjectUnknownClassification',\n   * 'BadRequestProjectUnsupportedDomainTypeChange', 'BadRequestProjectUnsupportedExportPlatform',\n   * 'BadRequestIterationName', 'BadRequestIterationNameNotUnique',\n   * 'BadRequestIterationDescription', 'BadRequestIterationIsNotTrained',\n   * 'BadRequestWorkspaceCannotBeModified', 'BadRequestWorkspaceNotDeletable', 'BadRequestTagName',\n   * 'BadRequestTagNameNotUnique', 'BadRequestTagDescription', 'BadRequestTagType',\n   * 'BadRequestMultipleNegativeTag', 'BadRequestImageTags', 'BadRequestImageRegions',\n   * 'BadRequestNegativeAndRegularTagOnSameImage', 'BadRequestRequiredParamIsNull',\n   * 'BadRequestIterationIsPublished', 'BadRequestInvalidPublishName',\n   * 'BadRequestInvalidPublishTarget', 'BadRequestUnpublishFailed', 'BadRequestSubscriptionApi',\n   * 'BadRequestExceedProjectLimit', 'BadRequestExceedIterationPerProjectLimit',\n   * 'BadRequestExceedTagPerProjectLimit', 'BadRequestExceedTagPerImageLimit',\n   * 'BadRequestExceededQuota', 'BadRequestCannotMigrateProjectWithName',\n   * 'BadRequestNotLimitedTrial', 'BadRequestImageBatch', 'BadRequestImageStream',\n   * 'BadRequestImageUrl', 'BadRequestImageFormat', 'BadRequestImageSizeBytes',\n   * 'BadRequestImageExceededCount', 'BadRequestTrainingNotNeeded',\n   * 'BadRequestTrainingNotNeededButTrainingPipelineUpdated', 'BadRequestTrainingValidationFailed',\n   * 'BadRequestClassificationTrainingValidationFailed',\n   * 'BadRequestMultiClassClassificationTrainingValidationFailed',\n   * 'BadRequestMultiLabelClassificationTrainingValidationFailed',\n   * 'BadRequestDetectionTrainingValidationFailed', 'BadRequestTrainingAlreadyInProgress',\n   * 'BadRequestDetectionTrainingNotAllowNegativeTag', 'BadRequestInvalidEmailAddress',\n   * 'BadRequestDomainNotSupportedForAdvancedTraining',\n   * 'BadRequestExportPlatformNotSupportedForAdvancedTraining',\n   * 'BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining',\n   * 'BadRequestExportValidationFailed', 'BadRequestExportAlreadyInProgress',\n   * 'BadRequestPredictionIdsMissing', 'BadRequestPredictionIdsExceededCount',\n   * 'BadRequestPredictionTagsExceededCount', 'BadRequestPredictionResultsExceededCount',\n   * 'BadRequestPredictionInvalidApplicationName', 'BadRequestPredictionInvalidQueryParameters',\n   * 'BadRequestInvalid', 'UnsupportedMediaType', 'Forbidden', 'ForbiddenUser',\n   * 'ForbiddenUserResource', 'ForbiddenUserSignupDisabled',\n   * 'ForbiddenUserSignupAllowanceExceeded', 'ForbiddenUserDoesNotExist', 'ForbiddenUserDisabled',\n   * 'ForbiddenUserInsufficientCapability', 'ForbiddenDRModeEnabled', 'ForbiddenInvalid',\n   * 'NotFound', 'NotFoundProject', 'NotFoundProjectDefaultIteration', 'NotFoundIteration',\n   * 'NotFoundIterationPerformance', 'NotFoundTag', 'NotFoundImage', 'NotFoundDomain',\n   * 'NotFoundApimSubscription', 'NotFoundInvalid', 'Conflict', 'ConflictInvalid', 'ErrorUnknown',\n   * 'ErrorProjectInvalidWorkspace', 'ErrorProjectInvalidPipelineConfiguration',\n   * 'ErrorProjectInvalidDomain', 'ErrorProjectTrainingRequestFailed',\n   * 'ErrorProjectExportRequestFailed', 'ErrorFeaturizationServiceUnavailable',\n   * 'ErrorFeaturizationQueueTimeout', 'ErrorFeaturizationInvalidFeaturizer',\n   * 'ErrorFeaturizationAugmentationUnavailable', 'ErrorFeaturizationUnrecognizedJob',\n   * 'ErrorFeaturizationAugmentationError', 'ErrorExporterInvalidPlatform',\n   * 'ErrorExporterInvalidFeaturizer', 'ErrorExporterInvalidClassifier',\n   * 'ErrorPredictionServiceUnavailable', 'ErrorPredictionModelNotFound',\n   * 'ErrorPredictionModelNotCached', 'ErrorPrediction', 'ErrorPredictionStorage',\n   * 'ErrorRegionProposal', 'ErrorInvalid'\n   */\n  code: CustomVisionErrorCodes;\n  /**\n   * A message explaining the error reported by the service.\n   */\n  message: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PredictionAPIClientClassifyImageUrlOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional. Specifies the name of application using the endpoint.\n   */\n  application?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PredictionAPIClientClassifyImageOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional. Specifies the name of application using the endpoint.\n   */\n  application?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PredictionAPIClientClassifyImageUrlWithNoStoreOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional. Specifies the name of application using the endpoint.\n   */\n  application?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PredictionAPIClientClassifyImageWithNoStoreOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional. Specifies the name of application using the endpoint.\n   */\n  application?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PredictionAPIClientDetectImageUrlOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional. Specifies the name of application using the endpoint.\n   */\n  application?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PredictionAPIClientDetectImageOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional. Specifies the name of application using the endpoint.\n   */\n  application?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PredictionAPIClientDetectImageUrlWithNoStoreOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional. Specifies the name of application using the endpoint.\n   */\n  application?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface PredictionAPIClientDetectImageWithNoStoreOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional. Specifies the name of application using the endpoint.\n   */\n  application?: string;\n}\n\n/**\n * Defines values for CustomVisionErrorCodes.\n * Possible values include: 'NoError', 'BadRequest', 'BadRequestExceededBatchSize',\n * 'BadRequestNotSupported', 'BadRequestInvalidIds', 'BadRequestProjectName',\n * 'BadRequestProjectNameNotUnique', 'BadRequestProjectDescription',\n * 'BadRequestProjectUnknownDomain', 'BadRequestProjectUnknownClassification',\n * 'BadRequestProjectUnsupportedDomainTypeChange', 'BadRequestProjectUnsupportedExportPlatform',\n * 'BadRequestIterationName', 'BadRequestIterationNameNotUnique', 'BadRequestIterationDescription',\n * 'BadRequestIterationIsNotTrained', 'BadRequestWorkspaceCannotBeModified',\n * 'BadRequestWorkspaceNotDeletable', 'BadRequestTagName', 'BadRequestTagNameNotUnique',\n * 'BadRequestTagDescription', 'BadRequestTagType', 'BadRequestMultipleNegativeTag',\n * 'BadRequestImageTags', 'BadRequestImageRegions', 'BadRequestNegativeAndRegularTagOnSameImage',\n * 'BadRequestRequiredParamIsNull', 'BadRequestIterationIsPublished',\n * 'BadRequestInvalidPublishName', 'BadRequestInvalidPublishTarget', 'BadRequestUnpublishFailed',\n * 'BadRequestSubscriptionApi', 'BadRequestExceedProjectLimit',\n * 'BadRequestExceedIterationPerProjectLimit', 'BadRequestExceedTagPerProjectLimit',\n * 'BadRequestExceedTagPerImageLimit', 'BadRequestExceededQuota',\n * 'BadRequestCannotMigrateProjectWithName', 'BadRequestNotLimitedTrial', 'BadRequestImageBatch',\n * 'BadRequestImageStream', 'BadRequestImageUrl', 'BadRequestImageFormat',\n * 'BadRequestImageSizeBytes', 'BadRequestImageExceededCount', 'BadRequestTrainingNotNeeded',\n * 'BadRequestTrainingNotNeededButTrainingPipelineUpdated', 'BadRequestTrainingValidationFailed',\n * 'BadRequestClassificationTrainingValidationFailed',\n * 'BadRequestMultiClassClassificationTrainingValidationFailed',\n * 'BadRequestMultiLabelClassificationTrainingValidationFailed',\n * 'BadRequestDetectionTrainingValidationFailed', 'BadRequestTrainingAlreadyInProgress',\n * 'BadRequestDetectionTrainingNotAllowNegativeTag', 'BadRequestInvalidEmailAddress',\n * 'BadRequestDomainNotSupportedForAdvancedTraining',\n * 'BadRequestExportPlatformNotSupportedForAdvancedTraining',\n * 'BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining',\n * 'BadRequestExportValidationFailed', 'BadRequestExportAlreadyInProgress',\n * 'BadRequestPredictionIdsMissing', 'BadRequestPredictionIdsExceededCount',\n * 'BadRequestPredictionTagsExceededCount', 'BadRequestPredictionResultsExceededCount',\n * 'BadRequestPredictionInvalidApplicationName', 'BadRequestPredictionInvalidQueryParameters',\n * 'BadRequestInvalid', 'UnsupportedMediaType', 'Forbidden', 'ForbiddenUser',\n * 'ForbiddenUserResource', 'ForbiddenUserSignupDisabled', 'ForbiddenUserSignupAllowanceExceeded',\n * 'ForbiddenUserDoesNotExist', 'ForbiddenUserDisabled', 'ForbiddenUserInsufficientCapability',\n * 'ForbiddenDRModeEnabled', 'ForbiddenInvalid', 'NotFound', 'NotFoundProject',\n * 'NotFoundProjectDefaultIteration', 'NotFoundIteration', 'NotFoundIterationPerformance',\n * 'NotFoundTag', 'NotFoundImage', 'NotFoundDomain', 'NotFoundApimSubscription', 'NotFoundInvalid',\n * 'Conflict', 'ConflictInvalid', 'ErrorUnknown', 'ErrorProjectInvalidWorkspace',\n * 'ErrorProjectInvalidPipelineConfiguration', 'ErrorProjectInvalidDomain',\n * 'ErrorProjectTrainingRequestFailed', 'ErrorProjectExportRequestFailed',\n * 'ErrorFeaturizationServiceUnavailable', 'ErrorFeaturizationQueueTimeout',\n * 'ErrorFeaturizationInvalidFeaturizer', 'ErrorFeaturizationAugmentationUnavailable',\n * 'ErrorFeaturizationUnrecognizedJob', 'ErrorFeaturizationAugmentationError',\n * 'ErrorExporterInvalidPlatform', 'ErrorExporterInvalidFeaturizer',\n * 'ErrorExporterInvalidClassifier', 'ErrorPredictionServiceUnavailable',\n * 'ErrorPredictionModelNotFound', 'ErrorPredictionModelNotCached', 'ErrorPrediction',\n * 'ErrorPredictionStorage', 'ErrorRegionProposal', 'ErrorInvalid'\n * @readonly\n * @enum {string}\n */\nexport type CustomVisionErrorCodes = 'NoError' | 'BadRequest' | 'BadRequestExceededBatchSize' | 'BadRequestNotSupported' | 'BadRequestInvalidIds' | 'BadRequestProjectName' | 'BadRequestProjectNameNotUnique' | 'BadRequestProjectDescription' | 'BadRequestProjectUnknownDomain' | 'BadRequestProjectUnknownClassification' | 'BadRequestProjectUnsupportedDomainTypeChange' | 'BadRequestProjectUnsupportedExportPlatform' | 'BadRequestIterationName' | 'BadRequestIterationNameNotUnique' | 'BadRequestIterationDescription' | 'BadRequestIterationIsNotTrained' | 'BadRequestWorkspaceCannotBeModified' | 'BadRequestWorkspaceNotDeletable' | 'BadRequestTagName' | 'BadRequestTagNameNotUnique' | 'BadRequestTagDescription' | 'BadRequestTagType' | 'BadRequestMultipleNegativeTag' | 'BadRequestImageTags' | 'BadRequestImageRegions' | 'BadRequestNegativeAndRegularTagOnSameImage' | 'BadRequestRequiredParamIsNull' | 'BadRequestIterationIsPublished' | 'BadRequestInvalidPublishName' | 'BadRequestInvalidPublishTarget' | 'BadRequestUnpublishFailed' | 'BadRequestSubscriptionApi' | 'BadRequestExceedProjectLimit' | 'BadRequestExceedIterationPerProjectLimit' | 'BadRequestExceedTagPerProjectLimit' | 'BadRequestExceedTagPerImageLimit' | 'BadRequestExceededQuota' | 'BadRequestCannotMigrateProjectWithName' | 'BadRequestNotLimitedTrial' | 'BadRequestImageBatch' | 'BadRequestImageStream' | 'BadRequestImageUrl' | 'BadRequestImageFormat' | 'BadRequestImageSizeBytes' | 'BadRequestImageExceededCount' | 'BadRequestTrainingNotNeeded' | 'BadRequestTrainingNotNeededButTrainingPipelineUpdated' | 'BadRequestTrainingValidationFailed' | 'BadRequestClassificationTrainingValidationFailed' | 'BadRequestMultiClassClassificationTrainingValidationFailed' | 'BadRequestMultiLabelClassificationTrainingValidationFailed' | 'BadRequestDetectionTrainingValidationFailed' | 'BadRequestTrainingAlreadyInProgress' | 'BadRequestDetectionTrainingNotAllowNegativeTag' | 'BadRequestInvalidEmailAddress' | 'BadRequestDomainNotSupportedForAdvancedTraining' | 'BadRequestExportPlatformNotSupportedForAdvancedTraining' | 'BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining' | 'BadRequestExportValidationFailed' | 'BadRequestExportAlreadyInProgress' | 'BadRequestPredictionIdsMissing' | 'BadRequestPredictionIdsExceededCount' | 'BadRequestPredictionTagsExceededCount' | 'BadRequestPredictionResultsExceededCount' | 'BadRequestPredictionInvalidApplicationName' | 'BadRequestPredictionInvalidQueryParameters' | 'BadRequestInvalid' | 'UnsupportedMediaType' | 'Forbidden' | 'ForbiddenUser' | 'ForbiddenUserResource' | 'ForbiddenUserSignupDisabled' | 'ForbiddenUserSignupAllowanceExceeded' | 'ForbiddenUserDoesNotExist' | 'ForbiddenUserDisabled' | 'ForbiddenUserInsufficientCapability' | 'ForbiddenDRModeEnabled' | 'ForbiddenInvalid' | 'NotFound' | 'NotFoundProject' | 'NotFoundProjectDefaultIteration' | 'NotFoundIteration' | 'NotFoundIterationPerformance' | 'NotFoundTag' | 'NotFoundImage' | 'NotFoundDomain' | 'NotFoundApimSubscription' | 'NotFoundInvalid' | 'Conflict' | 'ConflictInvalid' | 'ErrorUnknown' | 'ErrorProjectInvalidWorkspace' | 'ErrorProjectInvalidPipelineConfiguration' | 'ErrorProjectInvalidDomain' | 'ErrorProjectTrainingRequestFailed' | 'ErrorProjectExportRequestFailed' | 'ErrorFeaturizationServiceUnavailable' | 'ErrorFeaturizationQueueTimeout' | 'ErrorFeaturizationInvalidFeaturizer' | 'ErrorFeaturizationAugmentationUnavailable' | 'ErrorFeaturizationUnrecognizedJob' | 'ErrorFeaturizationAugmentationError' | 'ErrorExporterInvalidPlatform' | 'ErrorExporterInvalidFeaturizer' | 'ErrorExporterInvalidClassifier' | 'ErrorPredictionServiceUnavailable' | 'ErrorPredictionModelNotFound' | 'ErrorPredictionModelNotCached' | 'ErrorPrediction' | 'ErrorPredictionStorage' | 'ErrorRegionProposal' | 'ErrorInvalid';\n\n/**\n * Contains response data for the classifyImageUrl operation.\n */\nexport type ClassifyImageUrlResponse = ImagePrediction & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImagePrediction;\n    };\n};\n\n/**\n * Contains response data for the classifyImage operation.\n */\nexport type ClassifyImageResponse = ImagePrediction & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImagePrediction;\n    };\n};\n\n/**\n * Contains response data for the classifyImageUrlWithNoStore operation.\n */\nexport type ClassifyImageUrlWithNoStoreResponse = ImagePrediction & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImagePrediction;\n    };\n};\n\n/**\n * Contains response data for the classifyImageWithNoStore operation.\n */\nexport type ClassifyImageWithNoStoreResponse = ImagePrediction & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImagePrediction;\n    };\n};\n\n/**\n * Contains response data for the detectImageUrl operation.\n */\nexport type DetectImageUrlResponse = ImagePrediction & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImagePrediction;\n    };\n};\n\n/**\n * Contains response data for the detectImage operation.\n */\nexport type DetectImageResponse = ImagePrediction & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImagePrediction;\n    };\n};\n\n/**\n * Contains response data for the detectImageUrlWithNoStore operation.\n */\nexport type DetectImageUrlWithNoStoreResponse = ImagePrediction & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImagePrediction;\n    };\n};\n\n/**\n * Contains response data for the detectImageWithNoStore operation.\n */\nexport type DetectImageWithNoStoreResponse = ImagePrediction & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImagePrediction;\n    };\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n\nexport const ImageUrl: msRest.CompositeMapper = {\n  serializedName: \"ImageUrl\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageUrl\",\n    modelProperties: {\n      url: {\n        required: true,\n        nullable: false,\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BoundingBox: msRest.CompositeMapper = {\n  serializedName: \"BoundingBox\",\n  type: {\n    name: \"Composite\",\n    className: \"BoundingBox\",\n    modelProperties: {\n      left: {\n        required: true,\n        nullable: false,\n        serializedName: \"left\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        required: true,\n        nullable: false,\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        required: true,\n        nullable: false,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        required: true,\n        nullable: false,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Prediction: msRest.CompositeMapper = {\n  serializedName: \"Prediction\",\n  type: {\n    name: \"Composite\",\n    className: \"Prediction\",\n    modelProperties: {\n      probability: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"probability\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      tagId: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"tagId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      tagName: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"tagName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingBox: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"Composite\",\n          className: \"BoundingBox\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImagePrediction: msRest.CompositeMapper = {\n  serializedName: \"ImagePrediction\",\n  type: {\n    name: \"Composite\",\n    className: \"ImagePrediction\",\n    modelProperties: {\n      id: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      project: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"project\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      iteration: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"iteration\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      created: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      predictions: {\n        readOnly: true,\n        serializedName: \"predictions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Prediction\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const CustomVisionError: msRest.CompositeMapper = {\n  serializedName: \"CustomVisionError\",\n  type: {\n    name: \"Composite\",\n    className: \"CustomVisionError\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nexport const apiKey: msRest.OperationParameter = {\n  parameterPath: \"apiKey\",\n  mapper: {\n    required: true,\n    serializedName: \"Prediction-Key\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const application: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"application\"\n  ],\n  mapper: {\n    serializedName: \"application\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const endpoint: msRest.OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    required: true,\n    serializedName: \"Endpoint\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const imageData: msRest.OperationParameter = {\n  parameterPath: \"imageData\",\n  mapper: {\n    required: true,\n    serializedName: \"imageData\",\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\nexport const projectId: msRest.OperationURLParameter = {\n  parameterPath: \"projectId\",\n  mapper: {\n    required: true,\n    serializedName: \"projectId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const publishedName: msRest.OperationURLParameter = {\n  parameterPath: \"publishedName\",\n  mapper: {\n    required: true,\n    serializedName: \"publishedName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nconst packageName = \"@azure/cognitiveservices-customvision-prediction\";\nconst packageVersion = \"4.0.0\";\n\nexport class PredictionAPIClientContext extends msRest.ServiceClient {\n  apiKey: string;\n  endpoint: string;\n\n  /**\n   * Initializes a new instance of the PredictionAPIClientContext class.\n   * @param apiKey API key.\n   * @param endpoint Supported Cognitive Services endpoints.\n   * @param [options] The parameter options\n   */\n  constructor(apiKey: string, endpoint: string, options?: msRest.ServiceClientOptions) {\n    if (apiKey == undefined) {\n      throw new Error(\"'apiKey' cannot be null.\");\n    }\n    if (endpoint == undefined) {\n      throw new Error(\"'endpoint' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = msRest.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.baseUri = \"{Endpoint}/customvision/v3.0/prediction\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.apiKey = apiKey;\n    this.endpoint = endpoint;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { PredictionAPIClientContext } from \"./predictionAPIClientContext\";\n\nclass PredictionAPIClient extends PredictionAPIClientContext {\n  /**\n   * Initializes a new instance of the PredictionAPIClient class.\n   * @param apiKey API key.\n   * @param endpoint Supported Cognitive Services endpoints.\n   * @param [options] The parameter options\n   */\n  constructor(apiKey: string, endpoint: string, options?: msRest.ServiceClientOptions) {\n    super(apiKey, endpoint, options);\n  }\n\n  /**\n   * @summary Classify an image url and saves the result.\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ClassifyImageUrlResponse>\n   */\n  classifyImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientClassifyImageUrlOptionalParams): Promise<Models.ClassifyImageUrlResponse>;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.\n   * @param callback The callback\n   */\n  classifyImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  classifyImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientClassifyImageUrlOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  classifyImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientClassifyImageUrlOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.ClassifyImageUrlResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        publishedName,\n        imageUrl,\n        options\n      },\n      classifyImageUrlOperationSpec,\n      callback) as Promise<Models.ClassifyImageUrlResponse>;\n  }\n\n  /**\n   * @summary Classify an image and saves the result.\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 4MB.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ClassifyImageResponse>\n   */\n  classifyImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientClassifyImageOptionalParams): Promise<Models.ClassifyImageResponse>;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 4MB.\n   * @param callback The callback\n   */\n  classifyImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 4MB.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  classifyImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientClassifyImageOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  classifyImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientClassifyImageOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.ClassifyImageResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        publishedName,\n        imageData,\n        options\n      },\n      classifyImageOperationSpec,\n      callback) as Promise<Models.ClassifyImageResponse>;\n  }\n\n  /**\n   * @summary Classify an image url without saving the result.\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be\n   * evaluated.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ClassifyImageUrlWithNoStoreResponse>\n   */\n  classifyImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientClassifyImageUrlWithNoStoreOptionalParams): Promise<Models.ClassifyImageUrlWithNoStoreResponse>;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be\n   * evaluated.\n   * @param callback The callback\n   */\n  classifyImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be\n   * evaluated.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  classifyImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientClassifyImageUrlWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  classifyImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientClassifyImageUrlWithNoStoreOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.ClassifyImageUrlWithNoStoreResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        publishedName,\n        imageUrl,\n        options\n      },\n      classifyImageUrlWithNoStoreOperationSpec,\n      callback) as Promise<Models.ClassifyImageUrlWithNoStoreResponse>;\n  }\n\n  /**\n   * @summary Classify an image without saving the result.\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 0MB.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ClassifyImageWithNoStoreResponse>\n   */\n  classifyImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientClassifyImageWithNoStoreOptionalParams): Promise<Models.ClassifyImageWithNoStoreResponse>;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 0MB.\n   * @param callback The callback\n   */\n  classifyImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 0MB.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  classifyImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientClassifyImageWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  classifyImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientClassifyImageWithNoStoreOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.ClassifyImageWithNoStoreResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        publishedName,\n        imageData,\n        options\n      },\n      classifyImageWithNoStoreOperationSpec,\n      callback) as Promise<Models.ClassifyImageWithNoStoreResponse>;\n  }\n\n  /**\n   * @summary Detect objects in an image url and saves the result.\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DetectImageUrlResponse>\n   */\n  detectImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientDetectImageUrlOptionalParams): Promise<Models.DetectImageUrlResponse>;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.\n   * @param callback The callback\n   */\n  detectImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  detectImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientDetectImageUrlOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  detectImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientDetectImageUrlOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.DetectImageUrlResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        publishedName,\n        imageUrl,\n        options\n      },\n      detectImageUrlOperationSpec,\n      callback) as Promise<Models.DetectImageUrlResponse>;\n  }\n\n  /**\n   * @summary Detect objects in an image and saves the result.\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 4MB.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DetectImageResponse>\n   */\n  detectImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientDetectImageOptionalParams): Promise<Models.DetectImageResponse>;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 4MB.\n   * @param callback The callback\n   */\n  detectImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 4MB.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  detectImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientDetectImageOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  detectImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientDetectImageOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.DetectImageResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        publishedName,\n        imageData,\n        options\n      },\n      detectImageOperationSpec,\n      callback) as Promise<Models.DetectImageResponse>;\n  }\n\n  /**\n   * @summary Detect objects in an image url without saving the result.\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be\n   * evaluated.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DetectImageUrlWithNoStoreResponse>\n   */\n  detectImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientDetectImageUrlWithNoStoreOptionalParams): Promise<Models.DetectImageUrlWithNoStoreResponse>;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be\n   * evaluated.\n   * @param callback The callback\n   */\n  detectImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be\n   * evaluated.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  detectImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientDetectImageUrlWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  detectImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientDetectImageUrlWithNoStoreOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.DetectImageUrlWithNoStoreResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        publishedName,\n        imageUrl,\n        options\n      },\n      detectImageUrlWithNoStoreOperationSpec,\n      callback) as Promise<Models.DetectImageUrlWithNoStoreResponse>;\n  }\n\n  /**\n   * @summary Detect objects in an image without saving the result.\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 0MB.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DetectImageWithNoStoreResponse>\n   */\n  detectImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientDetectImageWithNoStoreOptionalParams): Promise<Models.DetectImageWithNoStoreResponse>;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 0MB.\n   * @param callback The callback\n   */\n  detectImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  /**\n   * @param projectId The project id.\n   * @param publishedName Specifies the name of the model to evaluate against.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 0MB.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  detectImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientDetectImageWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  detectImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientDetectImageWithNoStoreOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.DetectImageWithNoStoreResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        publishedName,\n        imageData,\n        options\n      },\n      detectImageWithNoStoreOperationSpec,\n      callback) as Promise<Models.DetectImageWithNoStoreResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst classifyImageUrlOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"{projectId}/classify/iterations/{publishedName}/url\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.publishedName\n  ],\n  queryParameters: [\n    Parameters.application\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"imageUrl\",\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImagePrediction\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst classifyImageOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"{projectId}/classify/iterations/{publishedName}/image\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.publishedName\n  ],\n  queryParameters: [\n    Parameters.application\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  formDataParameters: [\n    Parameters.imageData\n  ],\n  contentType: \"multipart/form-data\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImagePrediction\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst classifyImageUrlWithNoStoreOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"{projectId}/classify/iterations/{publishedName}/url/nostore\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.publishedName\n  ],\n  queryParameters: [\n    Parameters.application\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"imageUrl\",\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImagePrediction\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst classifyImageWithNoStoreOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"{projectId}/classify/iterations/{publishedName}/image/nostore\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.publishedName\n  ],\n  queryParameters: [\n    Parameters.application\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  formDataParameters: [\n    Parameters.imageData\n  ],\n  contentType: \"multipart/form-data\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImagePrediction\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst detectImageUrlOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"{projectId}/detect/iterations/{publishedName}/url\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.publishedName\n  ],\n  queryParameters: [\n    Parameters.application\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"imageUrl\",\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImagePrediction\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst detectImageOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"{projectId}/detect/iterations/{publishedName}/image\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.publishedName\n  ],\n  queryParameters: [\n    Parameters.application\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  formDataParameters: [\n    Parameters.imageData\n  ],\n  contentType: \"multipart/form-data\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImagePrediction\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst detectImageUrlWithNoStoreOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"{projectId}/detect/iterations/{publishedName}/url/nostore\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.publishedName\n  ],\n  queryParameters: [\n    Parameters.application\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"imageUrl\",\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImagePrediction\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst detectImageWithNoStoreOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"{projectId}/detect/iterations/{publishedName}/image/nostore\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.publishedName\n  ],\n  queryParameters: [\n    Parameters.application\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  formDataParameters: [\n    Parameters.imageData\n  ],\n  contentType: \"multipart/form-data\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImagePrediction\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nexport {\n  PredictionAPIClient,\n  PredictionAPIClientContext,\n  Models as PredictionAPIModels,\n  Mappers as PredictionAPIMappers\n};\n"],"names":["msRest.getDefaultUserAgentValue","msRest.ServiceClient","msRest.Serializer","Parameters.endpoint","Parameters.projectId","Parameters.publishedName","Parameters.application","Parameters.apiKey","Mappers.ImageUrl","Mappers.ImagePrediction","Mappers.CustomVisionError","Parameters.imageData"],"mappings":"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"}