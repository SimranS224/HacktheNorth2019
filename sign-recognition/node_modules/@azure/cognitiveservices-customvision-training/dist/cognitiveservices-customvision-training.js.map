{"version":3,"file":"cognitiveservices-customvision-training.js","sources":["../node_modules/tslib/tslib.es6.js","../src/models/index.ts","../src/models/mappers.ts","../src/models/parameters.ts","../src/trainingAPIClientContext.ts","../src/trainingAPIClient.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n/**\n * An interface representing Domain.\n */\nexport interface Domain {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly name?: string;\n  /**\n   * Possible values include: 'Classification', 'ObjectDetection'\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly type?: DomainType;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly exportable?: boolean;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly enabled?: boolean;\n}\n\n/**\n * Entry associating a tag to an image.\n */\nexport interface ImageTagCreateEntry {\n  /**\n   * Id of the image.\n   */\n  imageId?: string;\n  /**\n   * Id of the tag.\n   */\n  tagId?: string;\n}\n\n/**\n * Batch of image tags.\n */\nexport interface ImageTagCreateBatch {\n  /**\n   * Image Tag entries to include in this batch.\n   */\n  tags?: ImageTagCreateEntry[];\n}\n\n/**\n * An interface representing ImageTagCreateSummary.\n */\nexport interface ImageTagCreateSummary {\n  created?: ImageTagCreateEntry[];\n  duplicated?: ImageTagCreateEntry[];\n  exceeded?: ImageTagCreateEntry[];\n}\n\n/**\n * Entry associating a region to an image.\n */\nexport interface ImageRegionCreateEntry {\n  /**\n   * Id of the image.\n   */\n  imageId: string;\n  /**\n   * Id of the tag associated with this region.\n   */\n  tagId: string;\n  /**\n   * Coordinate of the left boundary.\n   */\n  left: number;\n  /**\n   * Coordinate of the top boundary.\n   */\n  top: number;\n  /**\n   * Width.\n   */\n  width: number;\n  /**\n   * Height.\n   */\n  height: number;\n}\n\n/**\n * Batch of image region information to create.\n */\nexport interface ImageRegionCreateBatch {\n  regions?: ImageRegionCreateEntry[];\n}\n\n/**\n * An interface representing ImageRegionCreateResult.\n */\nexport interface ImageRegionCreateResult {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly imageId?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly regionId?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly tagName?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n  /**\n   * Id of the tag associated with this region.\n   */\n  tagId: string;\n  /**\n   * Coordinate of the left boundary.\n   */\n  left: number;\n  /**\n   * Coordinate of the top boundary.\n   */\n  top: number;\n  /**\n   * Width.\n   */\n  width: number;\n  /**\n   * Height.\n   */\n  height: number;\n}\n\n/**\n * An interface representing ImageRegionCreateSummary.\n */\nexport interface ImageRegionCreateSummary {\n  created?: ImageRegionCreateResult[];\n  duplicated?: ImageRegionCreateEntry[];\n  exceeded?: ImageRegionCreateEntry[];\n}\n\n/**\n * An interface representing ImageTag.\n */\nexport interface ImageTag {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly tagId?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly tagName?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n}\n\n/**\n * An interface representing ImageRegion.\n */\nexport interface ImageRegion {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly regionId?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly tagName?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n  /**\n   * Id of the tag associated with this region.\n   */\n  tagId: string;\n  /**\n   * Coordinate of the left boundary.\n   */\n  left: number;\n  /**\n   * Coordinate of the top boundary.\n   */\n  top: number;\n  /**\n   * Width.\n   */\n  width: number;\n  /**\n   * Height.\n   */\n  height: number;\n}\n\n/**\n * Image model to be sent as JSON.\n */\nexport interface Image {\n  /**\n   * Id of the image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * Date the image was created.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n  /**\n   * Width of the image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly width?: number;\n  /**\n   * Height of the image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly height?: number;\n  /**\n   * The URI to the (resized) image used for training.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly resizedImageUri?: string;\n  /**\n   * The URI to the thumbnail of the original image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly thumbnailUri?: string;\n  /**\n   * The URI to the original uploaded image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly originalImageUri?: string;\n  /**\n   * Tags associated with this image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly tags?: ImageTag[];\n  /**\n   * Regions associated with this image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly regions?: ImageRegion[];\n}\n\n/**\n * An interface representing ImageCreateResult.\n */\nexport interface ImageCreateResult {\n  /**\n   * Source URL of the image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly sourceUrl?: string;\n  /**\n   * Status of the image creation. Possible values include: 'OK', 'OKDuplicate', 'ErrorSource',\n   * 'ErrorImageFormat', 'ErrorImageSize', 'ErrorStorage', 'ErrorLimitExceed',\n   * 'ErrorTagLimitExceed', 'ErrorRegionLimitExceed', 'ErrorUnknown',\n   * 'ErrorNegativeAndRegularTagOnSameImage'\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly status?: ImageCreateStatus;\n  /**\n   * The image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly image?: Image;\n}\n\n/**\n * An interface representing ImageCreateSummary.\n */\nexport interface ImageCreateSummary {\n  /**\n   * True if all of the images in the batch were created successfully, otherwise false.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly isBatchSuccessful?: boolean;\n  /**\n   * List of the image creation results.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly images?: ImageCreateResult[];\n}\n\n/**\n * An interface representing Region.\n */\nexport interface Region {\n  /**\n   * Id of the tag associated with this region.\n   */\n  tagId: string;\n  /**\n   * Coordinate of the left boundary.\n   */\n  left: number;\n  /**\n   * Coordinate of the top boundary.\n   */\n  top: number;\n  /**\n   * Width.\n   */\n  width: number;\n  /**\n   * Height.\n   */\n  height: number;\n}\n\n/**\n * An interface representing ImageFileCreateEntry.\n */\nexport interface ImageFileCreateEntry {\n  name?: string;\n  contents?: Uint8Array;\n  tagIds?: string[];\n  regions?: Region[];\n}\n\n/**\n * An interface representing ImageFileCreateBatch.\n */\nexport interface ImageFileCreateBatch {\n  images?: ImageFileCreateEntry[];\n  tagIds?: string[];\n}\n\n/**\n * An interface representing ImageUrlCreateEntry.\n */\nexport interface ImageUrlCreateEntry {\n  /**\n   * Url of the image.\n   */\n  url: string;\n  tagIds?: string[];\n  regions?: Region[];\n}\n\n/**\n * An interface representing ImageUrlCreateBatch.\n */\nexport interface ImageUrlCreateBatch {\n  images?: ImageUrlCreateEntry[];\n  tagIds?: string[];\n}\n\n/**\n * An interface representing ImageIdCreateEntry.\n */\nexport interface ImageIdCreateEntry {\n  /**\n   * Id of the image.\n   */\n  id?: string;\n  tagIds?: string[];\n  regions?: Region[];\n}\n\n/**\n * An interface representing ImageIdCreateBatch.\n */\nexport interface ImageIdCreateBatch {\n  images?: ImageIdCreateEntry[];\n  tagIds?: string[];\n}\n\n/**\n * Bounding box that defines a region of an image.\n */\nexport interface BoundingBox {\n  /**\n   * Coordinate of the left boundary.\n   */\n  left: number;\n  /**\n   * Coordinate of the top boundary.\n   */\n  top: number;\n  /**\n   * Width.\n   */\n  width: number;\n  /**\n   * Height.\n   */\n  height: number;\n}\n\n/**\n * An interface representing RegionProposal.\n */\nexport interface RegionProposal {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly confidence?: number;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly boundingBox?: BoundingBox;\n}\n\n/**\n * An interface representing ImageRegionProposal.\n */\nexport interface ImageRegionProposal {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly projectId?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly imageId?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly proposals?: RegionProposal[];\n}\n\n/**\n * Image url.\n */\nexport interface ImageUrl {\n  /**\n   * Url of the image.\n   */\n  url: string;\n}\n\n/**\n * Prediction result.\n */\nexport interface Prediction {\n  /**\n   * Probability of the tag.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly probability?: number;\n  /**\n   * Id of the predicted tag.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly tagId?: string;\n  /**\n   * Name of the predicted tag.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly tagName?: string;\n  /**\n   * Bounding box of the prediction.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly boundingBox?: BoundingBox;\n}\n\n/**\n * Result of an image prediction request.\n */\nexport interface ImagePrediction {\n  /**\n   * Prediction Id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * Project Id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly project?: string;\n  /**\n   * Iteration Id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly iteration?: string;\n  /**\n   * Date this prediction was created.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n  /**\n   * List of predictions.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly predictions?: Prediction[];\n}\n\n/**\n * An interface representing PredictionQueryTag.\n */\nexport interface PredictionQueryTag {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly minThreshold?: number;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly maxThreshold?: number;\n}\n\n/**\n * An interface representing PredictionQueryToken.\n */\nexport interface PredictionQueryToken {\n  session?: string;\n  continuation?: string;\n  maxCount?: number;\n  /**\n   * Possible values include: 'Newest', 'Oldest', 'Suggested'\n   */\n  orderBy?: OrderBy;\n  tags?: PredictionQueryTag[];\n  iterationId?: string;\n  startTime?: Date;\n  endTime?: Date;\n  application?: string;\n}\n\n/**\n * result of an image classification request.\n */\nexport interface StoredImagePrediction {\n  /**\n   * The URI to the (resized) prediction image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly resizedImageUri?: string;\n  /**\n   * The URI to the thumbnail of the original prediction image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly thumbnailUri?: string;\n  /**\n   * The URI to the original prediction image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly originalImageUri?: string;\n  /**\n   * Domain used for the prediction.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly domain?: string;\n  /**\n   * Prediction Id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * Project Id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly project?: string;\n  /**\n   * Iteration Id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly iteration?: string;\n  /**\n   * Date this prediction was created.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n  /**\n   * List of predictions.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly predictions?: Prediction[];\n}\n\n/**\n * An interface representing PredictionQueryResult.\n */\nexport interface PredictionQueryResult {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly token?: PredictionQueryToken;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly results?: StoredImagePrediction[];\n}\n\n/**\n * Represents performance data for a particular tag in a trained iteration.\n */\nexport interface TagPerformance {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly name?: string;\n  /**\n   * Gets the precision.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly precision?: number;\n  /**\n   * Gets the standard deviation for the precision.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly precisionStdDeviation?: number;\n  /**\n   * Gets the recall.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly recall?: number;\n  /**\n   * Gets the standard deviation for the recall.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly recallStdDeviation?: number;\n  /**\n   * Gets the average precision when applicable.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly averagePrecision?: number;\n}\n\n/**\n * Represents the detailed performance data for a trained iteration.\n */\nexport interface IterationPerformance {\n  /**\n   * Gets the per-tag performance details for this iteration.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly perTagPerformance?: TagPerformance[];\n  /**\n   * Gets the precision.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly precision?: number;\n  /**\n   * Gets the standard deviation for the precision.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly precisionStdDeviation?: number;\n  /**\n   * Gets the recall.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly recall?: number;\n  /**\n   * Gets the standard deviation for the recall.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly recallStdDeviation?: number;\n  /**\n   * Gets the average precision when applicable.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly averagePrecision?: number;\n}\n\n/**\n * Image performance model.\n */\nexport interface ImagePerformance {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly predictions?: Prediction[];\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly width?: number;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly height?: number;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly imageUri?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly thumbnailUri?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly tags?: ImageTag[];\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly regions?: ImageRegion[];\n}\n\n/**\n * Represents settings associated with a project.\n */\nexport interface ProjectSettings {\n  /**\n   * Gets or sets the id of the Domain to use with this project.\n   */\n  domainId?: string;\n  /**\n   * Gets or sets the classification type of the project. Possible values include: 'Multiclass',\n   * 'Multilabel'\n   */\n  classificationType?: Classifier;\n  /**\n   * A list of ExportPlatform that the trained model should be able to support.\n   */\n  targetExportPlatforms?: string[];\n}\n\n/**\n * Represents a project.\n */\nexport interface Project {\n  /**\n   * Gets the project id.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * Gets or sets the name of the project.\n   */\n  name: string;\n  /**\n   * Gets or sets the description of the project.\n   */\n  description: string;\n  /**\n   * Gets or sets the project settings.\n   */\n  settings: ProjectSettings;\n  /**\n   * Gets the date this project was created.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n  /**\n   * Gets the date this project was last modified.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly lastModified?: Date;\n  /**\n   * Gets the thumbnail url representing the image.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly thumbnailUri?: string;\n  /**\n   * Gets if the DR mode is on.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly drModeEnabled?: boolean;\n}\n\n/**\n * Iteration model to be sent over JSON.\n */\nexport interface Iteration {\n  /**\n   * Gets the id of the iteration.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * Gets or sets the name of the iteration.\n   */\n  name: string;\n  /**\n   * Gets the current iteration status.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly status?: string;\n  /**\n   * Gets the time this iteration was completed.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n  /**\n   * Gets the time this iteration was last modified.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly lastModified?: Date;\n  /**\n   * Gets the time this iteration was last modified.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly trainedAt?: Date;\n  /**\n   * Gets the project id of the iteration.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly projectId?: string;\n  /**\n   * Whether the iteration can be exported to another format for download.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly exportable?: boolean;\n  /**\n   * A set of platforms this iteration can export to.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly exportableTo?: string[];\n  /**\n   * Get or sets a guid of the domain the iteration has been trained on.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly domainId?: string;\n  /**\n   * Gets the classification type of the project. Possible values include: 'Multiclass',\n   * 'Multilabel'\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly classificationType?: Classifier;\n  /**\n   * Gets the training type of the iteration. Possible values include: 'Regular', 'Advanced'\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly trainingType?: TrainingType;\n  /**\n   * Gets the reserved advanced training budget for the iteration.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly reservedBudgetInHours?: number;\n  /**\n   * Name of the published model.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly publishName?: string;\n  /**\n   * Resource Provider Id this iteration was originally published to.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly originalPublishResourceId?: string;\n}\n\n/**\n * An interface representing ExportModel.\n */\nexport interface ExportModel {\n  /**\n   * Platform of the export. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX',\n   * 'VAIDK'\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly platform?: ExportPlatform;\n  /**\n   * Status of the export. Possible values include: 'Exporting', 'Failed', 'Done'\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly status?: ExportStatus;\n  /**\n   * URI used to download the model.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly downloadUri?: string;\n  /**\n   * Flavor of the export. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly flavor?: ExportFlavor;\n  /**\n   * Indicates an updated version of the export package is available and should be re-exported for\n   * the latest changes.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly newerVersionAvailable?: boolean;\n}\n\n/**\n * Represents a Tag.\n */\nexport interface Tag {\n  /**\n   * Gets the Tag ID.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly id?: string;\n  /**\n   * Gets or sets the name of the tag.\n   */\n  name: string;\n  /**\n   * Gets or sets the description of the tag.\n   */\n  description: string;\n  /**\n   * Gets or sets the type of the tag. Possible values include: 'Regular', 'Negative'\n   */\n  type: TagType;\n  /**\n   * Gets the number of images with this tag.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly imageCount?: number;\n}\n\n/**\n * An interface representing CustomVisionError.\n */\nexport interface CustomVisionError {\n  /**\n   * The error code. Possible values include: 'NoError', 'BadRequest',\n   * 'BadRequestExceededBatchSize', 'BadRequestNotSupported', 'BadRequestInvalidIds',\n   * 'BadRequestProjectName', 'BadRequestProjectNameNotUnique', 'BadRequestProjectDescription',\n   * 'BadRequestProjectUnknownDomain', 'BadRequestProjectUnknownClassification',\n   * 'BadRequestProjectUnsupportedDomainTypeChange', 'BadRequestProjectUnsupportedExportPlatform',\n   * 'BadRequestIterationName', 'BadRequestIterationNameNotUnique',\n   * 'BadRequestIterationDescription', 'BadRequestIterationIsNotTrained',\n   * 'BadRequestWorkspaceCannotBeModified', 'BadRequestWorkspaceNotDeletable', 'BadRequestTagName',\n   * 'BadRequestTagNameNotUnique', 'BadRequestTagDescription', 'BadRequestTagType',\n   * 'BadRequestMultipleNegativeTag', 'BadRequestImageTags', 'BadRequestImageRegions',\n   * 'BadRequestNegativeAndRegularTagOnSameImage', 'BadRequestRequiredParamIsNull',\n   * 'BadRequestIterationIsPublished', 'BadRequestInvalidPublishName',\n   * 'BadRequestInvalidPublishTarget', 'BadRequestUnpublishFailed',\n   * 'BadRequestIterationNotPublished', 'BadRequestSubscriptionApi',\n   * 'BadRequestExceedProjectLimit', 'BadRequestExceedIterationPerProjectLimit',\n   * 'BadRequestExceedTagPerProjectLimit', 'BadRequestExceedTagPerImageLimit',\n   * 'BadRequestExceededQuota', 'BadRequestCannotMigrateProjectWithName',\n   * 'BadRequestNotLimitedTrial', 'BadRequestImageBatch', 'BadRequestImageStream',\n   * 'BadRequestImageUrl', 'BadRequestImageFormat', 'BadRequestImageSizeBytes',\n   * 'BadRequestImageExceededCount', 'BadRequestTrainingNotNeeded',\n   * 'BadRequestTrainingNotNeededButTrainingPipelineUpdated', 'BadRequestTrainingValidationFailed',\n   * 'BadRequestClassificationTrainingValidationFailed',\n   * 'BadRequestMultiClassClassificationTrainingValidationFailed',\n   * 'BadRequestMultiLabelClassificationTrainingValidationFailed',\n   * 'BadRequestDetectionTrainingValidationFailed', 'BadRequestTrainingAlreadyInProgress',\n   * 'BadRequestDetectionTrainingNotAllowNegativeTag', 'BadRequestInvalidEmailAddress',\n   * 'BadRequestDomainNotSupportedForAdvancedTraining',\n   * 'BadRequestExportPlatformNotSupportedForAdvancedTraining',\n   * 'BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining',\n   * 'BadRequestExportValidationFailed', 'BadRequestExportAlreadyInProgress',\n   * 'BadRequestPredictionIdsMissing', 'BadRequestPredictionIdsExceededCount',\n   * 'BadRequestPredictionTagsExceededCount', 'BadRequestPredictionResultsExceededCount',\n   * 'BadRequestPredictionInvalidApplicationName', 'BadRequestPredictionInvalidQueryParameters',\n   * 'BadRequestInvalid', 'UnsupportedMediaType', 'Forbidden', 'ForbiddenUser',\n   * 'ForbiddenUserResource', 'ForbiddenUserSignupDisabled',\n   * 'ForbiddenUserSignupAllowanceExceeded', 'ForbiddenUserDoesNotExist', 'ForbiddenUserDisabled',\n   * 'ForbiddenUserInsufficientCapability', 'ForbiddenDRModeEnabled', 'ForbiddenInvalid',\n   * 'NotFound', 'NotFoundProject', 'NotFoundProjectDefaultIteration', 'NotFoundIteration',\n   * 'NotFoundIterationPerformance', 'NotFoundTag', 'NotFoundImage', 'NotFoundDomain',\n   * 'NotFoundApimSubscription', 'NotFoundInvalid', 'Conflict', 'ConflictInvalid', 'ErrorUnknown',\n   * 'ErrorProjectInvalidWorkspace', 'ErrorProjectInvalidPipelineConfiguration',\n   * 'ErrorProjectInvalidDomain', 'ErrorProjectTrainingRequestFailed',\n   * 'ErrorProjectExportRequestFailed', 'ErrorFeaturizationServiceUnavailable',\n   * 'ErrorFeaturizationQueueTimeout', 'ErrorFeaturizationInvalidFeaturizer',\n   * 'ErrorFeaturizationAugmentationUnavailable', 'ErrorFeaturizationUnrecognizedJob',\n   * 'ErrorFeaturizationAugmentationError', 'ErrorExporterInvalidPlatform',\n   * 'ErrorExporterInvalidFeaturizer', 'ErrorExporterInvalidClassifier',\n   * 'ErrorPredictionServiceUnavailable', 'ErrorPredictionModelNotFound',\n   * 'ErrorPredictionModelNotCached', 'ErrorPrediction', 'ErrorPredictionStorage',\n   * 'ErrorRegionProposal', 'ErrorInvalid'\n   */\n  code: CustomVisionErrorCodes;\n  /**\n   * A message explaining the error reported by the service.\n   */\n  message: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientGetTaggedImageCountOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The iteration id. Defaults to workspace.\n   */\n  iterationId?: string;\n  /**\n   * A list of tags ids to filter the images to count. Defaults to all tags when null.\n   */\n  tagIds?: string[];\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientGetUntaggedImageCountOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The iteration id. Defaults to workspace.\n   */\n  iterationId?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientGetTaggedImagesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The iteration id. Defaults to workspace.\n   */\n  iterationId?: string;\n  /**\n   * A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to\n   * 20.\n   */\n  tagIds?: string[];\n  /**\n   * The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'\n   */\n  orderBy?: OrderBy1;\n  /**\n   * Maximum number of images to return. Defaults to 50, limited to 256. Default value: 50.\n   */\n  take?: number;\n  /**\n   * Number of images to skip before beginning the image batch. Defaults to 0. Default value: 0.\n   */\n  skip?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientGetUntaggedImagesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The iteration id. Defaults to workspace.\n   */\n  iterationId?: string;\n  /**\n   * The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'\n   */\n  orderBy?: OrderBy2;\n  /**\n   * Maximum number of images to return. Defaults to 50, limited to 256. Default value: 50.\n   */\n  take?: number;\n  /**\n   * Number of images to skip before beginning the image batch. Defaults to 0. Default value: 0.\n   */\n  skip?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientGetImagesByIdsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The list of image ids to retrieve. Limited to 256.\n   */\n  imageIds?: string[];\n  /**\n   * The iteration id. Defaults to workspace.\n   */\n  iterationId?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientCreateImagesFromDataOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The tags ids with which to tag each image. Limited to 20.\n   */\n  tagIds?: string[];\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientQuickTestImageUrlOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional. Specifies the id of a particular iteration to evaluate against.\n   * The default iteration for the project will be used when not specified.\n   */\n  iterationId?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientQuickTestImageOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional. Specifies the id of a particular iteration to evaluate against.\n   * The default iteration for the project will be used when not specified.\n   */\n  iterationId?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientGetIterationPerformanceOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The threshold used to determine true predictions.\n   */\n  threshold?: number;\n  /**\n   * If applicable, the bounding box overlap threshold used to determine true predictions.\n   */\n  overlapThreshold?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientGetImagePerformancesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A list of tags ids to filter the images. Defaults to all tagged images when null. Limited to\n   * 20.\n   */\n  tagIds?: string[];\n  /**\n   * The ordering. Defaults to newest. Possible values include: 'Newest', 'Oldest'\n   */\n  orderBy?: OrderBy3;\n  /**\n   * Maximum number of images to return. Defaults to 50, limited to 256. Default value: 50.\n   */\n  take?: number;\n  /**\n   * Number of images to skip before beginning the image batch. Defaults to 0. Default value: 0.\n   */\n  skip?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientGetImagePerformanceCountOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * A list of tags ids to filter the images to count. Defaults to all tags when null.\n   */\n  tagIds?: string[];\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientCreateProjectOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The description of the project.\n   */\n  description?: string;\n  /**\n   * The id of the domain to use for this project. Defaults to General.\n   */\n  domainId?: string;\n  /**\n   * The type of classifier to create for this project. Possible values include: 'Multiclass',\n   * 'Multilabel'\n   */\n  classificationType?: ClassificationType;\n  /**\n   * List of platforms the trained model is intending exporting to.\n   */\n  targetExportPlatforms?: string[];\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientTrainProjectOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The type of training to use to train the project (default: Regular). Possible values include:\n   * 'Regular', 'Advanced'\n   */\n  trainingType?: TrainingType1;\n  /**\n   * The number of hours reserved as budget for training (if applicable). Default value: 0.\n   */\n  reservedBudgetInHours?: number;\n  /**\n   * Whether to force train even if dataset and configuration does not change (default: false).\n   * Default value: false.\n   */\n  forceTrain?: boolean;\n  /**\n   * The email address to send notification to when training finishes (default: null).\n   */\n  notificationEmailAddress?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientExportIterationOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The flavor of the target platform. Possible values include: 'Linux', 'Windows', 'ONNX10',\n   * 'ONNX12', 'ARM'\n   */\n  flavor?: Flavor;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientGetTagOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The iteration to retrieve this tag from. Optional, defaults to current training set.\n   */\n  iterationId?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientGetTagsOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * The iteration id. Defaults to workspace.\n   */\n  iterationId?: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TrainingAPIClientCreateTagOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * Optional description for the tag.\n   */\n  description?: string;\n  /**\n   * Optional type for the tag. Possible values include: 'Regular', 'Negative'\n   */\n  type?: Type;\n}\n\n/**\n * Defines values for DomainType.\n * Possible values include: 'Classification', 'ObjectDetection'\n * @readonly\n * @enum {string}\n */\nexport type DomainType = 'Classification' | 'ObjectDetection';\n\n/**\n * Defines values for ImageCreateStatus.\n * Possible values include: 'OK', 'OKDuplicate', 'ErrorSource', 'ErrorImageFormat',\n * 'ErrorImageSize', 'ErrorStorage', 'ErrorLimitExceed', 'ErrorTagLimitExceed',\n * 'ErrorRegionLimitExceed', 'ErrorUnknown', 'ErrorNegativeAndRegularTagOnSameImage'\n * @readonly\n * @enum {string}\n */\nexport type ImageCreateStatus = 'OK' | 'OKDuplicate' | 'ErrorSource' | 'ErrorImageFormat' | 'ErrorImageSize' | 'ErrorStorage' | 'ErrorLimitExceed' | 'ErrorTagLimitExceed' | 'ErrorRegionLimitExceed' | 'ErrorUnknown' | 'ErrorNegativeAndRegularTagOnSameImage';\n\n/**\n * Defines values for OrderBy.\n * Possible values include: 'Newest', 'Oldest', 'Suggested'\n * @readonly\n * @enum {string}\n */\nexport type OrderBy = 'Newest' | 'Oldest' | 'Suggested';\n\n/**\n * Defines values for Classifier.\n * Possible values include: 'Multiclass', 'Multilabel'\n * @readonly\n * @enum {string}\n */\nexport type Classifier = 'Multiclass' | 'Multilabel';\n\n/**\n * Defines values for TrainingType.\n * Possible values include: 'Regular', 'Advanced'\n * @readonly\n * @enum {string}\n */\nexport type TrainingType = 'Regular' | 'Advanced';\n\n/**\n * Defines values for ExportPlatform.\n * Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'\n * @readonly\n * @enum {string}\n */\nexport type ExportPlatform = 'CoreML' | 'TensorFlow' | 'DockerFile' | 'ONNX' | 'VAIDK';\n\n/**\n * Defines values for ExportStatus.\n * Possible values include: 'Exporting', 'Failed', 'Done'\n * @readonly\n * @enum {string}\n */\nexport type ExportStatus = 'Exporting' | 'Failed' | 'Done';\n\n/**\n * Defines values for ExportFlavor.\n * Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'\n * @readonly\n * @enum {string}\n */\nexport type ExportFlavor = 'Linux' | 'Windows' | 'ONNX10' | 'ONNX12' | 'ARM';\n\n/**\n * Defines values for TagType.\n * Possible values include: 'Regular', 'Negative'\n * @readonly\n * @enum {string}\n */\nexport type TagType = 'Regular' | 'Negative';\n\n/**\n * Defines values for CustomVisionErrorCodes.\n * Possible values include: 'NoError', 'BadRequest', 'BadRequestExceededBatchSize',\n * 'BadRequestNotSupported', 'BadRequestInvalidIds', 'BadRequestProjectName',\n * 'BadRequestProjectNameNotUnique', 'BadRequestProjectDescription',\n * 'BadRequestProjectUnknownDomain', 'BadRequestProjectUnknownClassification',\n * 'BadRequestProjectUnsupportedDomainTypeChange', 'BadRequestProjectUnsupportedExportPlatform',\n * 'BadRequestIterationName', 'BadRequestIterationNameNotUnique', 'BadRequestIterationDescription',\n * 'BadRequestIterationIsNotTrained', 'BadRequestWorkspaceCannotBeModified',\n * 'BadRequestWorkspaceNotDeletable', 'BadRequestTagName', 'BadRequestTagNameNotUnique',\n * 'BadRequestTagDescription', 'BadRequestTagType', 'BadRequestMultipleNegativeTag',\n * 'BadRequestImageTags', 'BadRequestImageRegions', 'BadRequestNegativeAndRegularTagOnSameImage',\n * 'BadRequestRequiredParamIsNull', 'BadRequestIterationIsPublished',\n * 'BadRequestInvalidPublishName', 'BadRequestInvalidPublishTarget', 'BadRequestUnpublishFailed',\n * 'BadRequestIterationNotPublished', 'BadRequestSubscriptionApi', 'BadRequestExceedProjectLimit',\n * 'BadRequestExceedIterationPerProjectLimit', 'BadRequestExceedTagPerProjectLimit',\n * 'BadRequestExceedTagPerImageLimit', 'BadRequestExceededQuota',\n * 'BadRequestCannotMigrateProjectWithName', 'BadRequestNotLimitedTrial', 'BadRequestImageBatch',\n * 'BadRequestImageStream', 'BadRequestImageUrl', 'BadRequestImageFormat',\n * 'BadRequestImageSizeBytes', 'BadRequestImageExceededCount', 'BadRequestTrainingNotNeeded',\n * 'BadRequestTrainingNotNeededButTrainingPipelineUpdated', 'BadRequestTrainingValidationFailed',\n * 'BadRequestClassificationTrainingValidationFailed',\n * 'BadRequestMultiClassClassificationTrainingValidationFailed',\n * 'BadRequestMultiLabelClassificationTrainingValidationFailed',\n * 'BadRequestDetectionTrainingValidationFailed', 'BadRequestTrainingAlreadyInProgress',\n * 'BadRequestDetectionTrainingNotAllowNegativeTag', 'BadRequestInvalidEmailAddress',\n * 'BadRequestDomainNotSupportedForAdvancedTraining',\n * 'BadRequestExportPlatformNotSupportedForAdvancedTraining',\n * 'BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining',\n * 'BadRequestExportValidationFailed', 'BadRequestExportAlreadyInProgress',\n * 'BadRequestPredictionIdsMissing', 'BadRequestPredictionIdsExceededCount',\n * 'BadRequestPredictionTagsExceededCount', 'BadRequestPredictionResultsExceededCount',\n * 'BadRequestPredictionInvalidApplicationName', 'BadRequestPredictionInvalidQueryParameters',\n * 'BadRequestInvalid', 'UnsupportedMediaType', 'Forbidden', 'ForbiddenUser',\n * 'ForbiddenUserResource', 'ForbiddenUserSignupDisabled', 'ForbiddenUserSignupAllowanceExceeded',\n * 'ForbiddenUserDoesNotExist', 'ForbiddenUserDisabled', 'ForbiddenUserInsufficientCapability',\n * 'ForbiddenDRModeEnabled', 'ForbiddenInvalid', 'NotFound', 'NotFoundProject',\n * 'NotFoundProjectDefaultIteration', 'NotFoundIteration', 'NotFoundIterationPerformance',\n * 'NotFoundTag', 'NotFoundImage', 'NotFoundDomain', 'NotFoundApimSubscription', 'NotFoundInvalid',\n * 'Conflict', 'ConflictInvalid', 'ErrorUnknown', 'ErrorProjectInvalidWorkspace',\n * 'ErrorProjectInvalidPipelineConfiguration', 'ErrorProjectInvalidDomain',\n * 'ErrorProjectTrainingRequestFailed', 'ErrorProjectExportRequestFailed',\n * 'ErrorFeaturizationServiceUnavailable', 'ErrorFeaturizationQueueTimeout',\n * 'ErrorFeaturizationInvalidFeaturizer', 'ErrorFeaturizationAugmentationUnavailable',\n * 'ErrorFeaturizationUnrecognizedJob', 'ErrorFeaturizationAugmentationError',\n * 'ErrorExporterInvalidPlatform', 'ErrorExporterInvalidFeaturizer',\n * 'ErrorExporterInvalidClassifier', 'ErrorPredictionServiceUnavailable',\n * 'ErrorPredictionModelNotFound', 'ErrorPredictionModelNotCached', 'ErrorPrediction',\n * 'ErrorPredictionStorage', 'ErrorRegionProposal', 'ErrorInvalid'\n * @readonly\n * @enum {string}\n */\nexport type CustomVisionErrorCodes = 'NoError' | 'BadRequest' | 'BadRequestExceededBatchSize' | 'BadRequestNotSupported' | 'BadRequestInvalidIds' | 'BadRequestProjectName' | 'BadRequestProjectNameNotUnique' | 'BadRequestProjectDescription' | 'BadRequestProjectUnknownDomain' | 'BadRequestProjectUnknownClassification' | 'BadRequestProjectUnsupportedDomainTypeChange' | 'BadRequestProjectUnsupportedExportPlatform' | 'BadRequestIterationName' | 'BadRequestIterationNameNotUnique' | 'BadRequestIterationDescription' | 'BadRequestIterationIsNotTrained' | 'BadRequestWorkspaceCannotBeModified' | 'BadRequestWorkspaceNotDeletable' | 'BadRequestTagName' | 'BadRequestTagNameNotUnique' | 'BadRequestTagDescription' | 'BadRequestTagType' | 'BadRequestMultipleNegativeTag' | 'BadRequestImageTags' | 'BadRequestImageRegions' | 'BadRequestNegativeAndRegularTagOnSameImage' | 'BadRequestRequiredParamIsNull' | 'BadRequestIterationIsPublished' | 'BadRequestInvalidPublishName' | 'BadRequestInvalidPublishTarget' | 'BadRequestUnpublishFailed' | 'BadRequestIterationNotPublished' | 'BadRequestSubscriptionApi' | 'BadRequestExceedProjectLimit' | 'BadRequestExceedIterationPerProjectLimit' | 'BadRequestExceedTagPerProjectLimit' | 'BadRequestExceedTagPerImageLimit' | 'BadRequestExceededQuota' | 'BadRequestCannotMigrateProjectWithName' | 'BadRequestNotLimitedTrial' | 'BadRequestImageBatch' | 'BadRequestImageStream' | 'BadRequestImageUrl' | 'BadRequestImageFormat' | 'BadRequestImageSizeBytes' | 'BadRequestImageExceededCount' | 'BadRequestTrainingNotNeeded' | 'BadRequestTrainingNotNeededButTrainingPipelineUpdated' | 'BadRequestTrainingValidationFailed' | 'BadRequestClassificationTrainingValidationFailed' | 'BadRequestMultiClassClassificationTrainingValidationFailed' | 'BadRequestMultiLabelClassificationTrainingValidationFailed' | 'BadRequestDetectionTrainingValidationFailed' | 'BadRequestTrainingAlreadyInProgress' | 'BadRequestDetectionTrainingNotAllowNegativeTag' | 'BadRequestInvalidEmailAddress' | 'BadRequestDomainNotSupportedForAdvancedTraining' | 'BadRequestExportPlatformNotSupportedForAdvancedTraining' | 'BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining' | 'BadRequestExportValidationFailed' | 'BadRequestExportAlreadyInProgress' | 'BadRequestPredictionIdsMissing' | 'BadRequestPredictionIdsExceededCount' | 'BadRequestPredictionTagsExceededCount' | 'BadRequestPredictionResultsExceededCount' | 'BadRequestPredictionInvalidApplicationName' | 'BadRequestPredictionInvalidQueryParameters' | 'BadRequestInvalid' | 'UnsupportedMediaType' | 'Forbidden' | 'ForbiddenUser' | 'ForbiddenUserResource' | 'ForbiddenUserSignupDisabled' | 'ForbiddenUserSignupAllowanceExceeded' | 'ForbiddenUserDoesNotExist' | 'ForbiddenUserDisabled' | 'ForbiddenUserInsufficientCapability' | 'ForbiddenDRModeEnabled' | 'ForbiddenInvalid' | 'NotFound' | 'NotFoundProject' | 'NotFoundProjectDefaultIteration' | 'NotFoundIteration' | 'NotFoundIterationPerformance' | 'NotFoundTag' | 'NotFoundImage' | 'NotFoundDomain' | 'NotFoundApimSubscription' | 'NotFoundInvalid' | 'Conflict' | 'ConflictInvalid' | 'ErrorUnknown' | 'ErrorProjectInvalidWorkspace' | 'ErrorProjectInvalidPipelineConfiguration' | 'ErrorProjectInvalidDomain' | 'ErrorProjectTrainingRequestFailed' | 'ErrorProjectExportRequestFailed' | 'ErrorFeaturizationServiceUnavailable' | 'ErrorFeaturizationQueueTimeout' | 'ErrorFeaturizationInvalidFeaturizer' | 'ErrorFeaturizationAugmentationUnavailable' | 'ErrorFeaturizationUnrecognizedJob' | 'ErrorFeaturizationAugmentationError' | 'ErrorExporterInvalidPlatform' | 'ErrorExporterInvalidFeaturizer' | 'ErrorExporterInvalidClassifier' | 'ErrorPredictionServiceUnavailable' | 'ErrorPredictionModelNotFound' | 'ErrorPredictionModelNotCached' | 'ErrorPrediction' | 'ErrorPredictionStorage' | 'ErrorRegionProposal' | 'ErrorInvalid';\n\n/**\n * Defines values for OrderBy1.\n * Possible values include: 'Newest', 'Oldest'\n * @readonly\n * @enum {string}\n */\nexport type OrderBy1 = 'Newest' | 'Oldest';\n\n/**\n * Defines values for OrderBy2.\n * Possible values include: 'Newest', 'Oldest'\n * @readonly\n * @enum {string}\n */\nexport type OrderBy2 = 'Newest' | 'Oldest';\n\n/**\n * Defines values for OrderBy3.\n * Possible values include: 'Newest', 'Oldest'\n * @readonly\n * @enum {string}\n */\nexport type OrderBy3 = 'Newest' | 'Oldest';\n\n/**\n * Defines values for ClassificationType.\n * Possible values include: 'Multiclass', 'Multilabel'\n * @readonly\n * @enum {string}\n */\nexport type ClassificationType = 'Multiclass' | 'Multilabel';\n\n/**\n * Defines values for TrainingType1.\n * Possible values include: 'Regular', 'Advanced'\n * @readonly\n * @enum {string}\n */\nexport type TrainingType1 = 'Regular' | 'Advanced';\n\n/**\n * Defines values for Flavor.\n * Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'\n * @readonly\n * @enum {string}\n */\nexport type Flavor = 'Linux' | 'Windows' | 'ONNX10' | 'ONNX12' | 'ARM';\n\n/**\n * Defines values for Type.\n * Possible values include: 'Regular', 'Negative'\n * @readonly\n * @enum {string}\n */\nexport type Type = 'Regular' | 'Negative';\n\n/**\n * Defines values for Platform.\n * Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'\n * @readonly\n * @enum {string}\n */\nexport type Platform = 'CoreML' | 'TensorFlow' | 'DockerFile' | 'ONNX' | 'VAIDK';\n\n/**\n * Contains response data for the getDomains operation.\n */\nexport type GetDomainsResponse = Array<Domain> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Domain[];\n    };\n};\n\n/**\n * Contains response data for the getDomain operation.\n */\nexport type GetDomainResponse = Domain & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Domain;\n    };\n};\n\n/**\n * Contains response data for the getTaggedImageCount operation.\n */\nexport type GetTaggedImageCountResponse = {\n  /**\n   * The parsed response body.\n   */\n  body: number;\n\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: number;\n    };\n};\n\n/**\n * Contains response data for the getUntaggedImageCount operation.\n */\nexport type GetUntaggedImageCountResponse = {\n  /**\n   * The parsed response body.\n   */\n  body: number;\n\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: number;\n    };\n};\n\n/**\n * Contains response data for the createImageTags operation.\n */\nexport type CreateImageTagsResponse = ImageTagCreateSummary & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImageTagCreateSummary;\n    };\n};\n\n/**\n * Contains response data for the createImageRegions operation.\n */\nexport type CreateImageRegionsResponse = ImageRegionCreateSummary & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImageRegionCreateSummary;\n    };\n};\n\n/**\n * Contains response data for the getTaggedImages operation.\n */\nexport type GetTaggedImagesResponse = Array<Image> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Image[];\n    };\n};\n\n/**\n * Contains response data for the getUntaggedImages operation.\n */\nexport type GetUntaggedImagesResponse = Array<Image> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Image[];\n    };\n};\n\n/**\n * Contains response data for the getImagesByIds operation.\n */\nexport type GetImagesByIdsResponse = Array<Image> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Image[];\n    };\n};\n\n/**\n * Contains response data for the createImagesFromData operation.\n */\nexport type CreateImagesFromDataResponse = ImageCreateSummary & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImageCreateSummary;\n    };\n};\n\n/**\n * Contains response data for the createImagesFromFiles operation.\n */\nexport type CreateImagesFromFilesResponse = ImageCreateSummary & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImageCreateSummary;\n    };\n};\n\n/**\n * Contains response data for the createImagesFromUrls operation.\n */\nexport type CreateImagesFromUrlsResponse = ImageCreateSummary & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImageCreateSummary;\n    };\n};\n\n/**\n * Contains response data for the createImagesFromPredictions operation.\n */\nexport type CreateImagesFromPredictionsResponse = ImageCreateSummary & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImageCreateSummary;\n    };\n};\n\n/**\n * Contains response data for the getImageRegionProposals operation.\n */\nexport type GetImageRegionProposalsResponse = ImageRegionProposal & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImageRegionProposal;\n    };\n};\n\n/**\n * Contains response data for the quickTestImageUrl operation.\n */\nexport type QuickTestImageUrlResponse = ImagePrediction & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImagePrediction;\n    };\n};\n\n/**\n * Contains response data for the quickTestImage operation.\n */\nexport type QuickTestImageResponse = ImagePrediction & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImagePrediction;\n    };\n};\n\n/**\n * Contains response data for the queryPredictions operation.\n */\nexport type QueryPredictionsResponse = PredictionQueryResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: PredictionQueryResult;\n    };\n};\n\n/**\n * Contains response data for the getIterationPerformance operation.\n */\nexport type GetIterationPerformanceResponse = IterationPerformance & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: IterationPerformance;\n    };\n};\n\n/**\n * Contains response data for the getImagePerformances operation.\n */\nexport type GetImagePerformancesResponse = Array<ImagePerformance> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ImagePerformance[];\n    };\n};\n\n/**\n * Contains response data for the getImagePerformanceCount operation.\n */\nexport type GetImagePerformanceCountResponse = {\n  /**\n   * The parsed response body.\n   */\n  body: number;\n\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: number;\n    };\n};\n\n/**\n * Contains response data for the getProjects operation.\n */\nexport type GetProjectsResponse = Array<Project> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Project[];\n    };\n};\n\n/**\n * Contains response data for the createProject operation.\n */\nexport type CreateProjectResponse = Project & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Project;\n    };\n};\n\n/**\n * Contains response data for the getProject operation.\n */\nexport type GetProjectResponse = Project & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Project;\n    };\n};\n\n/**\n * Contains response data for the updateProject operation.\n */\nexport type UpdateProjectResponse = Project & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Project;\n    };\n};\n\n/**\n * Contains response data for the trainProject operation.\n */\nexport type TrainProjectResponse = Iteration & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Iteration;\n    };\n};\n\n/**\n * Contains response data for the getIterations operation.\n */\nexport type GetIterationsResponse = Array<Iteration> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Iteration[];\n    };\n};\n\n/**\n * Contains response data for the getIteration operation.\n */\nexport type GetIterationResponse = Iteration & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Iteration;\n    };\n};\n\n/**\n * Contains response data for the updateIteration operation.\n */\nexport type UpdateIterationResponse = Iteration & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Iteration;\n    };\n};\n\n/**\n * Contains response data for the publishIteration operation.\n */\nexport type PublishIterationResponse = {\n  /**\n   * The parsed response body.\n   */\n  body: boolean;\n\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: boolean;\n    };\n};\n\n/**\n * Contains response data for the getExports operation.\n */\nexport type GetExportsResponse = Array<ExportModel> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ExportModel[];\n    };\n};\n\n/**\n * Contains response data for the exportIteration operation.\n */\nexport type ExportIterationResponse = ExportModel & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: ExportModel;\n    };\n};\n\n/**\n * Contains response data for the getTag operation.\n */\nexport type GetTagResponse = Tag & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Tag;\n    };\n};\n\n/**\n * Contains response data for the updateTag operation.\n */\nexport type UpdateTagResponse = Tag & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Tag;\n    };\n};\n\n/**\n * Contains response data for the getTags operation.\n */\nexport type GetTagsResponse = Array<Tag> & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Tag[];\n    };\n};\n\n/**\n * Contains response data for the createTag operation.\n */\nexport type CreateTagResponse = Tag & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: Tag;\n    };\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n\nexport const Domain: msRest.CompositeMapper = {\n  serializedName: \"Domain\",\n  type: {\n    name: \"Composite\",\n    className: \"Domain\",\n    modelProperties: {\n      id: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      name: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      exportable: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"exportable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      enabled: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"enabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageTagCreateEntry: msRest.CompositeMapper = {\n  serializedName: \"ImageTagCreateEntry\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageTagCreateEntry\",\n    modelProperties: {\n      imageId: {\n        nullable: false,\n        serializedName: \"imageId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      tagId: {\n        nullable: false,\n        serializedName: \"tagId\",\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageTagCreateBatch: msRest.CompositeMapper = {\n  serializedName: \"ImageTagCreateBatch\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageTagCreateBatch\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageTagCreateEntry\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageTagCreateSummary: msRest.CompositeMapper = {\n  serializedName: \"ImageTagCreateSummary\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageTagCreateSummary\",\n    modelProperties: {\n      created: {\n        nullable: true,\n        serializedName: \"created\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageTagCreateEntry\"\n            }\n          }\n        }\n      },\n      duplicated: {\n        nullable: true,\n        serializedName: \"duplicated\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageTagCreateEntry\"\n            }\n          }\n        }\n      },\n      exceeded: {\n        nullable: true,\n        serializedName: \"exceeded\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageTagCreateEntry\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageRegionCreateEntry: msRest.CompositeMapper = {\n  serializedName: \"ImageRegionCreateEntry\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageRegionCreateEntry\",\n    modelProperties: {\n      imageId: {\n        required: true,\n        nullable: false,\n        serializedName: \"imageId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      tagId: {\n        required: true,\n        nullable: false,\n        serializedName: \"tagId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      left: {\n        required: true,\n        nullable: false,\n        serializedName: \"left\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        required: true,\n        nullable: false,\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        required: true,\n        nullable: false,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        required: true,\n        nullable: false,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageRegionCreateBatch: msRest.CompositeMapper = {\n  serializedName: \"ImageRegionCreateBatch\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageRegionCreateBatch\",\n    modelProperties: {\n      regions: {\n        serializedName: \"regions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageRegionCreateEntry\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageRegionCreateResult: msRest.CompositeMapper = {\n  serializedName: \"ImageRegionCreateResult\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageRegionCreateResult\",\n    modelProperties: {\n      imageId: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"imageId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      regionId: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"regionId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      tagName: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"tagName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      created: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      tagId: {\n        required: true,\n        nullable: false,\n        serializedName: \"tagId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      left: {\n        required: true,\n        nullable: false,\n        serializedName: \"left\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        required: true,\n        nullable: false,\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        required: true,\n        nullable: false,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        required: true,\n        nullable: false,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageRegionCreateSummary: msRest.CompositeMapper = {\n  serializedName: \"ImageRegionCreateSummary\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageRegionCreateSummary\",\n    modelProperties: {\n      created: {\n        nullable: true,\n        serializedName: \"created\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageRegionCreateResult\"\n            }\n          }\n        }\n      },\n      duplicated: {\n        nullable: true,\n        serializedName: \"duplicated\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageRegionCreateEntry\"\n            }\n          }\n        }\n      },\n      exceeded: {\n        nullable: true,\n        serializedName: \"exceeded\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageRegionCreateEntry\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageTag: msRest.CompositeMapper = {\n  serializedName: \"ImageTag\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageTag\",\n    modelProperties: {\n      tagId: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"tagId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      tagName: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"tagName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      created: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageRegion: msRest.CompositeMapper = {\n  serializedName: \"ImageRegion\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageRegion\",\n    modelProperties: {\n      regionId: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"regionId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      tagName: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"tagName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      created: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      tagId: {\n        required: true,\n        nullable: false,\n        serializedName: \"tagId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      left: {\n        required: true,\n        nullable: false,\n        serializedName: \"left\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        required: true,\n        nullable: false,\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        required: true,\n        nullable: false,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        required: true,\n        nullable: false,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Image: msRest.CompositeMapper = {\n  serializedName: \"Image\",\n  type: {\n    name: \"Composite\",\n    className: \"Image\",\n    modelProperties: {\n      id: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      created: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      width: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      resizedImageUri: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"resizedImageUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      thumbnailUri: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"thumbnailUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      originalImageUri: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"originalImageUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageTag\"\n            }\n          }\n        }\n      },\n      regions: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"regions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageRegion\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageCreateResult: msRest.CompositeMapper = {\n  serializedName: \"ImageCreateResult\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageCreateResult\",\n    modelProperties: {\n      sourceUrl: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"sourceUrl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      image: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"image\",\n        type: {\n          name: \"Composite\",\n          className: \"Image\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageCreateSummary: msRest.CompositeMapper = {\n  serializedName: \"ImageCreateSummary\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageCreateSummary\",\n    modelProperties: {\n      isBatchSuccessful: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"isBatchSuccessful\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      images: {\n        readOnly: true,\n        serializedName: \"images\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageCreateResult\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Region: msRest.CompositeMapper = {\n  serializedName: \"Region\",\n  type: {\n    name: \"Composite\",\n    className: \"Region\",\n    modelProperties: {\n      tagId: {\n        required: true,\n        nullable: false,\n        serializedName: \"tagId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      left: {\n        required: true,\n        nullable: false,\n        serializedName: \"left\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        required: true,\n        nullable: false,\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        required: true,\n        nullable: false,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        required: true,\n        nullable: false,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageFileCreateEntry: msRest.CompositeMapper = {\n  serializedName: \"ImageFileCreateEntry\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageFileCreateEntry\",\n    modelProperties: {\n      name: {\n        nullable: false,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contents: {\n        nullable: false,\n        serializedName: \"contents\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      tagIds: {\n        serializedName: \"tagIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      },\n      regions: {\n        serializedName: \"regions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Region\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageFileCreateBatch: msRest.CompositeMapper = {\n  serializedName: \"ImageFileCreateBatch\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageFileCreateBatch\",\n    modelProperties: {\n      images: {\n        serializedName: \"images\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageFileCreateEntry\"\n            }\n          }\n        }\n      },\n      tagIds: {\n        serializedName: \"tagIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageUrlCreateEntry: msRest.CompositeMapper = {\n  serializedName: \"ImageUrlCreateEntry\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageUrlCreateEntry\",\n    modelProperties: {\n      url: {\n        required: true,\n        nullable: false,\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tagIds: {\n        serializedName: \"tagIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      },\n      regions: {\n        serializedName: \"regions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Region\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageUrlCreateBatch: msRest.CompositeMapper = {\n  serializedName: \"ImageUrlCreateBatch\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageUrlCreateBatch\",\n    modelProperties: {\n      images: {\n        serializedName: \"images\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageUrlCreateEntry\"\n            }\n          }\n        }\n      },\n      tagIds: {\n        serializedName: \"tagIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageIdCreateEntry: msRest.CompositeMapper = {\n  serializedName: \"ImageIdCreateEntry\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageIdCreateEntry\",\n    modelProperties: {\n      id: {\n        nullable: false,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      tagIds: {\n        serializedName: \"tagIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      },\n      regions: {\n        serializedName: \"regions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Region\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageIdCreateBatch: msRest.CompositeMapper = {\n  serializedName: \"ImageIdCreateBatch\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageIdCreateBatch\",\n    modelProperties: {\n      images: {\n        serializedName: \"images\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageIdCreateEntry\"\n            }\n          }\n        }\n      },\n      tagIds: {\n        serializedName: \"tagIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Uuid\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BoundingBox: msRest.CompositeMapper = {\n  serializedName: \"BoundingBox\",\n  type: {\n    name: \"Composite\",\n    className: \"BoundingBox\",\n    modelProperties: {\n      left: {\n        required: true,\n        nullable: false,\n        serializedName: \"left\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      top: {\n        required: true,\n        nullable: false,\n        serializedName: \"top\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        required: true,\n        nullable: false,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        required: true,\n        nullable: false,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegionProposal: msRest.CompositeMapper = {\n  serializedName: \"RegionProposal\",\n  type: {\n    name: \"Composite\",\n    className: \"RegionProposal\",\n    modelProperties: {\n      confidence: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      boundingBox: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"Composite\",\n          className: \"BoundingBox\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageRegionProposal: msRest.CompositeMapper = {\n  serializedName: \"ImageRegionProposal\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageRegionProposal\",\n    modelProperties: {\n      projectId: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"projectId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      imageId: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"imageId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      proposals: {\n        readOnly: true,\n        serializedName: \"proposals\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RegionProposal\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ImageUrl: msRest.CompositeMapper = {\n  serializedName: \"ImageUrl\",\n  type: {\n    name: \"Composite\",\n    className: \"ImageUrl\",\n    modelProperties: {\n      url: {\n        required: true,\n        nullable: false,\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Prediction: msRest.CompositeMapper = {\n  serializedName: \"Prediction\",\n  type: {\n    name: \"Composite\",\n    className: \"Prediction\",\n    modelProperties: {\n      probability: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"probability\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      tagId: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"tagId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      tagName: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"tagName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingBox: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"boundingBox\",\n        type: {\n          name: \"Composite\",\n          className: \"BoundingBox\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImagePrediction: msRest.CompositeMapper = {\n  serializedName: \"ImagePrediction\",\n  type: {\n    name: \"Composite\",\n    className: \"ImagePrediction\",\n    modelProperties: {\n      id: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      project: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"project\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      iteration: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"iteration\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      created: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      predictions: {\n        readOnly: true,\n        serializedName: \"predictions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Prediction\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PredictionQueryTag: msRest.CompositeMapper = {\n  serializedName: \"PredictionQueryTag\",\n  type: {\n    name: \"Composite\",\n    className: \"PredictionQueryTag\",\n    modelProperties: {\n      id: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      minThreshold: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"minThreshold\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      maxThreshold: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"maxThreshold\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PredictionQueryToken: msRest.CompositeMapper = {\n  serializedName: \"PredictionQueryToken\",\n  type: {\n    name: \"Composite\",\n    className: \"PredictionQueryToken\",\n    modelProperties: {\n      session: {\n        nullable: false,\n        serializedName: \"session\",\n        type: {\n          name: \"String\"\n        }\n      },\n      continuation: {\n        nullable: false,\n        serializedName: \"continuation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxCount: {\n        nullable: false,\n        serializedName: \"maxCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      orderBy: {\n        nullable: false,\n        serializedName: \"orderBy\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PredictionQueryTag\"\n            }\n          }\n        }\n      },\n      iterationId: {\n        nullable: true,\n        serializedName: \"iterationId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      startTime: {\n        nullable: true,\n        serializedName: \"startTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      endTime: {\n        nullable: true,\n        serializedName: \"endTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      application: {\n        nullable: false,\n        serializedName: \"application\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StoredImagePrediction: msRest.CompositeMapper = {\n  serializedName: \"StoredImagePrediction\",\n  type: {\n    name: \"Composite\",\n    className: \"StoredImagePrediction\",\n    modelProperties: {\n      resizedImageUri: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"resizedImageUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      thumbnailUri: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"thumbnailUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      originalImageUri: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"originalImageUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      domain: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"domain\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      id: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      project: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"project\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      iteration: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"iteration\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      created: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      predictions: {\n        readOnly: true,\n        serializedName: \"predictions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Prediction\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PredictionQueryResult: msRest.CompositeMapper = {\n  serializedName: \"PredictionQueryResult\",\n  type: {\n    name: \"Composite\",\n    className: \"PredictionQueryResult\",\n    modelProperties: {\n      token: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"token\",\n        type: {\n          name: \"Composite\",\n          className: \"PredictionQueryToken\"\n        }\n      },\n      results: {\n        readOnly: true,\n        serializedName: \"results\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"StoredImagePrediction\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TagPerformance: msRest.CompositeMapper = {\n  serializedName: \"TagPerformance\",\n  type: {\n    name: \"Composite\",\n    className: \"TagPerformance\",\n    modelProperties: {\n      id: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      name: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      precision: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"precision\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      precisionStdDeviation: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"precisionStdDeviation\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      recall: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recall\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      recallStdDeviation: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recallStdDeviation\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      averagePrecision: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"averagePrecision\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const IterationPerformance: msRest.CompositeMapper = {\n  serializedName: \"IterationPerformance\",\n  type: {\n    name: \"Composite\",\n    className: \"IterationPerformance\",\n    modelProperties: {\n      perTagPerformance: {\n        readOnly: true,\n        serializedName: \"perTagPerformance\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TagPerformance\"\n            }\n          }\n        }\n      },\n      precision: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"precision\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      precisionStdDeviation: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"precisionStdDeviation\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      recall: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recall\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      recallStdDeviation: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"recallStdDeviation\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      averagePrecision: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"averagePrecision\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImagePerformance: msRest.CompositeMapper = {\n  serializedName: \"ImagePerformance\",\n  type: {\n    name: \"Composite\",\n    className: \"ImagePerformance\",\n    modelProperties: {\n      predictions: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"predictions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Prediction\"\n            }\n          }\n        }\n      },\n      id: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      created: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      width: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      imageUri: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"imageUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      thumbnailUri: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"thumbnailUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"tags\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageTag\"\n            }\n          }\n        }\n      },\n      regions: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"regions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageRegion\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ProjectSettings: msRest.CompositeMapper = {\n  serializedName: \"ProjectSettings\",\n  type: {\n    name: \"Composite\",\n    className: \"ProjectSettings\",\n    modelProperties: {\n      domainId: {\n        nullable: false,\n        serializedName: \"domainId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      classificationType: {\n        nullable: true,\n        serializedName: \"classificationType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      targetExportPlatforms: {\n        serializedName: \"targetExportPlatforms\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Project: msRest.CompositeMapper = {\n  serializedName: \"Project\",\n  type: {\n    name: \"Composite\",\n    className: \"Project\",\n    modelProperties: {\n      id: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      name: {\n        required: true,\n        nullable: false,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        required: true,\n        nullable: false,\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      settings: {\n        required: true,\n        nullable: false,\n        serializedName: \"settings\",\n        type: {\n          name: \"Composite\",\n          className: \"ProjectSettings\"\n        }\n      },\n      created: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastModified: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"lastModified\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      thumbnailUri: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"thumbnailUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      drModeEnabled: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"drModeEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const Iteration: msRest.CompositeMapper = {\n  serializedName: \"Iteration\",\n  type: {\n    name: \"Composite\",\n    className: \"Iteration\",\n    modelProperties: {\n      id: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      name: {\n        required: true,\n        nullable: false,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      created: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"created\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastModified: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"lastModified\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      trainedAt: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"trainedAt\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      projectId: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"projectId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      exportable: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"exportable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      exportableTo: {\n        readOnly: true,\n        serializedName: \"exportableTo\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      domainId: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"domainId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      classificationType: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"classificationType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      trainingType: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"trainingType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      reservedBudgetInHours: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"reservedBudgetInHours\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      publishName: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"publishName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      originalPublishResourceId: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"originalPublishResourceId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExportModel: msRest.CompositeMapper = {\n  serializedName: \"Export\",\n  type: {\n    name: \"Composite\",\n    className: \"ExportModel\",\n    modelProperties: {\n      platform: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"platform\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      downloadUri: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"downloadUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      flavor: {\n        nullable: true,\n        readOnly: true,\n        serializedName: \"flavor\",\n        type: {\n          name: \"String\"\n        }\n      },\n      newerVersionAvailable: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"newerVersionAvailable\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const Tag: msRest.CompositeMapper = {\n  serializedName: \"Tag\",\n  type: {\n    name: \"Composite\",\n    className: \"Tag\",\n    modelProperties: {\n      id: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"id\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      name: {\n        required: true,\n        nullable: false,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        required: true,\n        nullable: false,\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        required: true,\n        nullable: false,\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      imageCount: {\n        nullable: false,\n        readOnly: true,\n        serializedName: \"imageCount\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomVisionError: msRest.CompositeMapper = {\n  serializedName: \"CustomVisionError\",\n  type: {\n    name: \"Composite\",\n    className: \"CustomVisionError\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nexport const apiKey: msRest.OperationParameter = {\n  parameterPath: \"apiKey\",\n  mapper: {\n    required: true,\n    serializedName: \"Training-Key\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const classificationType: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"classificationType\"\n  ],\n  mapper: {\n    serializedName: \"classificationType\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const description: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"description\"\n  ],\n  mapper: {\n    serializedName: \"description\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const domainId0: msRest.OperationURLParameter = {\n  parameterPath: \"domainId\",\n  mapper: {\n    required: true,\n    serializedName: \"domainId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const domainId1: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"domainId\"\n  ],\n  mapper: {\n    serializedName: \"domainId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const endpoint: msRest.OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    required: true,\n    serializedName: \"Endpoint\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const flavor: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"flavor\"\n  ],\n  mapper: {\n    serializedName: \"flavor\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const forceTrain: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"forceTrain\"\n  ],\n  mapper: {\n    serializedName: \"forceTrain\",\n    defaultValue: false,\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const ids: msRest.OperationQueryParameter = {\n  parameterPath: \"ids\",\n  mapper: {\n    required: true,\n    serializedName: \"ids\",\n    constraints: {\n      MaxItems: 64,\n      MinItems: 0\n    },\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const imageData: msRest.OperationParameter = {\n  parameterPath: \"imageData\",\n  mapper: {\n    required: true,\n    serializedName: \"imageData\",\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\nexport const imageId: msRest.OperationURLParameter = {\n  parameterPath: \"imageId\",\n  mapper: {\n    required: true,\n    serializedName: \"imageId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const imageIds0: msRest.OperationQueryParameter = {\n  parameterPath: \"imageIds\",\n  mapper: {\n    required: true,\n    serializedName: \"imageIds\",\n    constraints: {\n      MaxItems: 64,\n      MinItems: 0\n    },\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const imageIds1: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"imageIds\"\n  ],\n  mapper: {\n    serializedName: \"imageIds\",\n    constraints: {\n      MaxItems: 256,\n      MinItems: 0\n    },\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const imageIds2: msRest.OperationQueryParameter = {\n  parameterPath: \"imageIds\",\n  mapper: {\n    required: true,\n    serializedName: \"imageIds\",\n    constraints: {\n      MaxItems: 256,\n      MinItems: 0\n    },\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const iterationId0: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"iterationId\"\n  ],\n  mapper: {\n    serializedName: \"iterationId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const iterationId1: msRest.OperationURLParameter = {\n  parameterPath: \"iterationId\",\n  mapper: {\n    required: true,\n    serializedName: \"iterationId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const name: msRest.OperationQueryParameter = {\n  parameterPath: \"name\",\n  mapper: {\n    required: true,\n    serializedName: \"name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const notificationEmailAddress: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"notificationEmailAddress\"\n  ],\n  mapper: {\n    serializedName: \"notificationEmailAddress\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const orderBy: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"orderBy\"\n  ],\n  mapper: {\n    serializedName: \"orderBy\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const overlapThreshold: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"overlapThreshold\"\n  ],\n  mapper: {\n    serializedName: \"overlapThreshold\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const platform: msRest.OperationQueryParameter = {\n  parameterPath: \"platform\",\n  mapper: {\n    required: true,\n    serializedName: \"platform\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const predictionId: msRest.OperationQueryParameter = {\n  parameterPath: \"predictionId\",\n  mapper: {\n    required: true,\n    serializedName: \"predictionId\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const projectId: msRest.OperationURLParameter = {\n  parameterPath: \"projectId\",\n  mapper: {\n    required: true,\n    serializedName: \"projectId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const publishName: msRest.OperationQueryParameter = {\n  parameterPath: \"publishName\",\n  mapper: {\n    required: true,\n    serializedName: \"publishName\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const regionIds: msRest.OperationQueryParameter = {\n  parameterPath: \"regionIds\",\n  mapper: {\n    required: true,\n    serializedName: \"regionIds\",\n    constraints: {\n      MaxItems: 64,\n      MinItems: 0\n    },\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const reservedBudgetInHours: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"reservedBudgetInHours\"\n  ],\n  mapper: {\n    serializedName: \"reservedBudgetInHours\",\n    defaultValue: 0,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const skip: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"skip\"\n  ],\n  mapper: {\n    serializedName: \"skip\",\n    defaultValue: 0,\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const tagId: msRest.OperationURLParameter = {\n  parameterPath: \"tagId\",\n  mapper: {\n    required: true,\n    serializedName: \"tagId\",\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\nexport const tagIds0: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"tagIds\"\n  ],\n  mapper: {\n    serializedName: \"tagIds\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const tagIds1: msRest.OperationQueryParameter = {\n  parameterPath: \"tagIds\",\n  mapper: {\n    required: true,\n    serializedName: \"tagIds\",\n    constraints: {\n      MaxItems: 20,\n      MinItems: 0\n    },\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const tagIds2: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"tagIds\"\n  ],\n  mapper: {\n    serializedName: \"tagIds\",\n    constraints: {\n      MaxItems: 20,\n      MinItems: 0\n    },\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const take: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"take\"\n  ],\n  mapper: {\n    serializedName: \"take\",\n    defaultValue: 50,\n    constraints: {\n      InclusiveMaximum: 256,\n      InclusiveMinimum: 0\n    },\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const targetExportPlatforms: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"targetExportPlatforms\"\n  ],\n  mapper: {\n    serializedName: \"targetExportPlatforms\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: msRest.QueryCollectionFormat.Csv\n};\nexport const threshold: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"threshold\"\n  ],\n  mapper: {\n    serializedName: \"threshold\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\nexport const trainingType: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"trainingType\"\n  ],\n  mapper: {\n    serializedName: \"trainingType\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const type: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"type\"\n  ],\n  mapper: {\n    serializedName: \"type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nconst packageName = \"@azure/cognitiveservices-customvision-training\";\nconst packageVersion = \"4.0.0\";\n\nexport class TrainingAPIClientContext extends msRest.ServiceClient {\n  apiKey: string;\n  endpoint: string;\n\n  /**\n   * Initializes a new instance of the TrainingAPIClientContext class.\n   * @param apiKey API key.\n   * @param endpoint Supported Cognitive Services endpoints.\n   * @param [options] The parameter options\n   */\n  constructor(apiKey: string, endpoint: string, options?: msRest.ServiceClientOptions) {\n    if (apiKey == undefined) {\n      throw new Error(\"'apiKey' cannot be null.\");\n    }\n    if (endpoint == undefined) {\n      throw new Error(\"'endpoint' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = msRest.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.baseUri = \"{Endpoint}/customvision/v3.0/training\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.apiKey = apiKey;\n    this.endpoint = endpoint;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { TrainingAPIClientContext } from \"./trainingAPIClientContext\";\n\nclass TrainingAPIClient extends TrainingAPIClientContext {\n  /**\n   * Initializes a new instance of the TrainingAPIClient class.\n   * @param apiKey API key.\n   * @param endpoint Supported Cognitive Services endpoints.\n   * @param [options] The parameter options\n   */\n  constructor(apiKey: string, endpoint: string, options?: msRest.ServiceClientOptions) {\n    super(apiKey, endpoint, options);\n  }\n\n  /**\n   * @summary Get a list of the available domains.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDomainsResponse>\n   */\n  getDomains(options?: msRest.RequestOptionsBase): Promise<Models.GetDomainsResponse>;\n  /**\n   * @param callback The callback\n   */\n  getDomains(callback: msRest.ServiceCallback<Models.Domain[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDomains(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Domain[]>): void;\n  getDomains(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Domain[]>, callback?: msRest.ServiceCallback<Models.Domain[]>): Promise<Models.GetDomainsResponse> {\n    return this.sendOperationRequest(\n      {\n        options\n      },\n      getDomainsOperationSpec,\n      callback) as Promise<Models.GetDomainsResponse>;\n  }\n\n  /**\n   * @summary Get information about a specific domain.\n   * @param domainId The id of the domain to get information about.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDomainResponse>\n   */\n  getDomain(domainId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetDomainResponse>;\n  /**\n   * @param domainId The id of the domain to get information about.\n   * @param callback The callback\n   */\n  getDomain(domainId: string, callback: msRest.ServiceCallback<Models.Domain>): void;\n  /**\n   * @param domainId The id of the domain to get information about.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDomain(domainId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Domain>): void;\n  getDomain(domainId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Domain>, callback?: msRest.ServiceCallback<Models.Domain>): Promise<Models.GetDomainResponse> {\n    return this.sendOperationRequest(\n      {\n        domainId,\n        options\n      },\n      getDomainOperationSpec,\n      callback) as Promise<Models.GetDomainResponse>;\n  }\n\n  /**\n   * The filtering is on an and/or relationship. For example, if the provided tag ids are for the\n   * \"Dog\" and\n   * \"Cat\" tags, then only images tagged with Dog and/or Cat will be returned\n   * @summary Gets the number of images tagged with the provided {tagIds}.\n   * @param projectId The project id.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetTaggedImageCountResponse>\n   */\n  getTaggedImageCount(projectId: string, options?: Models.TrainingAPIClientGetTaggedImageCountOptionalParams): Promise<Models.GetTaggedImageCountResponse>;\n  /**\n   * @param projectId The project id.\n   * @param callback The callback\n   */\n  getTaggedImageCount(projectId: string, callback: msRest.ServiceCallback<number>): void;\n  /**\n   * @param projectId The project id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getTaggedImageCount(projectId: string, options: Models.TrainingAPIClientGetTaggedImageCountOptionalParams, callback: msRest.ServiceCallback<number>): void;\n  getTaggedImageCount(projectId: string, options?: Models.TrainingAPIClientGetTaggedImageCountOptionalParams | msRest.ServiceCallback<number>, callback?: msRest.ServiceCallback<number>): Promise<Models.GetTaggedImageCountResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        options\n      },\n      getTaggedImageCountOperationSpec,\n      callback) as Promise<Models.GetTaggedImageCountResponse>;\n  }\n\n  /**\n   * This API returns the images which have no tags for a given project and optionally an iteration.\n   * If no iteration is specified the\n   * current workspace is used.\n   * @summary Gets the number of untagged images.\n   * @param projectId The project id.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetUntaggedImageCountResponse>\n   */\n  getUntaggedImageCount(projectId: string, options?: Models.TrainingAPIClientGetUntaggedImageCountOptionalParams): Promise<Models.GetUntaggedImageCountResponse>;\n  /**\n   * @param projectId The project id.\n   * @param callback The callback\n   */\n  getUntaggedImageCount(projectId: string, callback: msRest.ServiceCallback<number>): void;\n  /**\n   * @param projectId The project id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getUntaggedImageCount(projectId: string, options: Models.TrainingAPIClientGetUntaggedImageCountOptionalParams, callback: msRest.ServiceCallback<number>): void;\n  getUntaggedImageCount(projectId: string, options?: Models.TrainingAPIClientGetUntaggedImageCountOptionalParams | msRest.ServiceCallback<number>, callback?: msRest.ServiceCallback<number>): Promise<Models.GetUntaggedImageCountResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        options\n      },\n      getUntaggedImageCountOperationSpec,\n      callback) as Promise<Models.GetUntaggedImageCountResponse>;\n  }\n\n  /**\n   * @summary Associate a set of images with a set of tags.\n   * @param projectId The project id.\n   * @param batch Batch of image tags. Limited to 128 tags per batch.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateImageTagsResponse>\n   */\n  createImageTags(projectId: string, batch: Models.ImageTagCreateBatch, options?: msRest.RequestOptionsBase): Promise<Models.CreateImageTagsResponse>;\n  /**\n   * @param projectId The project id.\n   * @param batch Batch of image tags. Limited to 128 tags per batch.\n   * @param callback The callback\n   */\n  createImageTags(projectId: string, batch: Models.ImageTagCreateBatch, callback: msRest.ServiceCallback<Models.ImageTagCreateSummary>): void;\n  /**\n   * @param projectId The project id.\n   * @param batch Batch of image tags. Limited to 128 tags per batch.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createImageTags(projectId: string, batch: Models.ImageTagCreateBatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageTagCreateSummary>): void;\n  createImageTags(projectId: string, batch: Models.ImageTagCreateBatch, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImageTagCreateSummary>, callback?: msRest.ServiceCallback<Models.ImageTagCreateSummary>): Promise<Models.CreateImageTagsResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        batch,\n        options\n      },\n      createImageTagsOperationSpec,\n      callback) as Promise<Models.CreateImageTagsResponse>;\n  }\n\n  /**\n   * @summary Remove a set of tags from a set of images.\n   * @param projectId The project id.\n   * @param imageIds Image ids. Limited to 64 images.\n   * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteImageTags(projectId: string, imageIds: string[], tagIds: string[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param projectId The project id.\n   * @param imageIds Image ids. Limited to 64 images.\n   * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.\n   * @param callback The callback\n   */\n  deleteImageTags(projectId: string, imageIds: string[], tagIds: string[], callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param projectId The project id.\n   * @param imageIds Image ids. Limited to 64 images.\n   * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteImageTags(projectId: string, imageIds: string[], tagIds: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteImageTags(projectId: string, imageIds: string[], tagIds: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        imageIds,\n        tagIds,\n        options\n      },\n      deleteImageTagsOperationSpec,\n      callback);\n  }\n\n  /**\n   * This API accepts a batch of image regions, and optionally tags, to update existing images with\n   * region information.\n   * There is a limit of 64 entries in the batch.\n   * @summary Create a set of image regions.\n   * @param projectId The project id.\n   * @param batch Batch of image regions which include a tag and bounding box. Limited to 64.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateImageRegionsResponse>\n   */\n  createImageRegions(projectId: string, batch: Models.ImageRegionCreateBatch, options?: msRest.RequestOptionsBase): Promise<Models.CreateImageRegionsResponse>;\n  /**\n   * @param projectId The project id.\n   * @param batch Batch of image regions which include a tag and bounding box. Limited to 64.\n   * @param callback The callback\n   */\n  createImageRegions(projectId: string, batch: Models.ImageRegionCreateBatch, callback: msRest.ServiceCallback<Models.ImageRegionCreateSummary>): void;\n  /**\n   * @param projectId The project id.\n   * @param batch Batch of image regions which include a tag and bounding box. Limited to 64.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createImageRegions(projectId: string, batch: Models.ImageRegionCreateBatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageRegionCreateSummary>): void;\n  createImageRegions(projectId: string, batch: Models.ImageRegionCreateBatch, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImageRegionCreateSummary>, callback?: msRest.ServiceCallback<Models.ImageRegionCreateSummary>): Promise<Models.CreateImageRegionsResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        batch,\n        options\n      },\n      createImageRegionsOperationSpec,\n      callback) as Promise<Models.CreateImageRegionsResponse>;\n  }\n\n  /**\n   * @summary Delete a set of image regions.\n   * @param projectId The project id.\n   * @param regionIds Regions to delete. Limited to 64.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteImageRegions(projectId: string, regionIds: string[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param projectId The project id.\n   * @param regionIds Regions to delete. Limited to 64.\n   * @param callback The callback\n   */\n  deleteImageRegions(projectId: string, regionIds: string[], callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param projectId The project id.\n   * @param regionIds Regions to delete. Limited to 64.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteImageRegions(projectId: string, regionIds: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteImageRegions(projectId: string, regionIds: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        regionIds,\n        options\n      },\n      deleteImageRegionsOperationSpec,\n      callback);\n  }\n\n  /**\n   * This API supports batching and range selection. By default it will only return first 50 images\n   * matching images.\n   * Use the {take} and {skip} parameters to control how many images to return in a given batch.\n   * The filtering is on an and/or relationship. For example, if the provided tag ids are for the\n   * \"Dog\" and\n   * \"Cat\" tags, then only images tagged with Dog and/or Cat will be returned\n   * @summary Get tagged images for a given project iteration.\n   * @param projectId The project id.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetTaggedImagesResponse>\n   */\n  getTaggedImages(projectId: string, options?: Models.TrainingAPIClientGetTaggedImagesOptionalParams): Promise<Models.GetTaggedImagesResponse>;\n  /**\n   * @param projectId The project id.\n   * @param callback The callback\n   */\n  getTaggedImages(projectId: string, callback: msRest.ServiceCallback<Models.Image[]>): void;\n  /**\n   * @param projectId The project id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getTaggedImages(projectId: string, options: Models.TrainingAPIClientGetTaggedImagesOptionalParams, callback: msRest.ServiceCallback<Models.Image[]>): void;\n  getTaggedImages(projectId: string, options?: Models.TrainingAPIClientGetTaggedImagesOptionalParams | msRest.ServiceCallback<Models.Image[]>, callback?: msRest.ServiceCallback<Models.Image[]>): Promise<Models.GetTaggedImagesResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        options\n      },\n      getTaggedImagesOperationSpec,\n      callback) as Promise<Models.GetTaggedImagesResponse>;\n  }\n\n  /**\n   * This API supports batching and range selection. By default it will only return first 50 images\n   * matching images.\n   * Use the {take} and {skip} parameters to control how many images to return in a given batch.\n   * @summary Get untagged images for a given project iteration.\n   * @param projectId The project id.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetUntaggedImagesResponse>\n   */\n  getUntaggedImages(projectId: string, options?: Models.TrainingAPIClientGetUntaggedImagesOptionalParams): Promise<Models.GetUntaggedImagesResponse>;\n  /**\n   * @param projectId The project id.\n   * @param callback The callback\n   */\n  getUntaggedImages(projectId: string, callback: msRest.ServiceCallback<Models.Image[]>): void;\n  /**\n   * @param projectId The project id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getUntaggedImages(projectId: string, options: Models.TrainingAPIClientGetUntaggedImagesOptionalParams, callback: msRest.ServiceCallback<Models.Image[]>): void;\n  getUntaggedImages(projectId: string, options?: Models.TrainingAPIClientGetUntaggedImagesOptionalParams | msRest.ServiceCallback<Models.Image[]>, callback?: msRest.ServiceCallback<Models.Image[]>): Promise<Models.GetUntaggedImagesResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        options\n      },\n      getUntaggedImagesOperationSpec,\n      callback) as Promise<Models.GetUntaggedImagesResponse>;\n  }\n\n  /**\n   * This API will return a set of Images for the specified tags and optionally iteration. If no\n   * iteration is specified the\n   * current workspace is used.\n   * @summary Get images by id for a given project iteration.\n   * @param projectId The project id.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetImagesByIdsResponse>\n   */\n  getImagesByIds(projectId: string, options?: Models.TrainingAPIClientGetImagesByIdsOptionalParams): Promise<Models.GetImagesByIdsResponse>;\n  /**\n   * @param projectId The project id.\n   * @param callback The callback\n   */\n  getImagesByIds(projectId: string, callback: msRest.ServiceCallback<Models.Image[]>): void;\n  /**\n   * @param projectId The project id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getImagesByIds(projectId: string, options: Models.TrainingAPIClientGetImagesByIdsOptionalParams, callback: msRest.ServiceCallback<Models.Image[]>): void;\n  getImagesByIds(projectId: string, options?: Models.TrainingAPIClientGetImagesByIdsOptionalParams | msRest.ServiceCallback<Models.Image[]>, callback?: msRest.ServiceCallback<Models.Image[]>): Promise<Models.GetImagesByIdsResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        options\n      },\n      getImagesByIdsOperationSpec,\n      callback) as Promise<Models.GetImagesByIdsResponse>;\n  }\n\n  /**\n   * This API accepts body content as multipart/form-data and application/octet-stream. When using\n   * multipart\n   * multiple image files can be sent at once, with a maximum of 64 files\n   * @summary Add the provided images to the set of training images.\n   * @param projectId The project id.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 6MB.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateImagesFromDataResponse>\n   */\n  createImagesFromData(projectId: string, imageData: msRest.HttpRequestBody, options?: Models.TrainingAPIClientCreateImagesFromDataOptionalParams): Promise<Models.CreateImagesFromDataResponse>;\n  /**\n   * @param projectId The project id.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 6MB.\n   * @param callback The callback\n   */\n  createImagesFromData(projectId: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;\n  /**\n   * @param projectId The project id.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 6MB.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createImagesFromData(projectId: string, imageData: msRest.HttpRequestBody, options: Models.TrainingAPIClientCreateImagesFromDataOptionalParams, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;\n  createImagesFromData(projectId: string, imageData: msRest.HttpRequestBody, options?: Models.TrainingAPIClientCreateImagesFromDataOptionalParams | msRest.ServiceCallback<Models.ImageCreateSummary>, callback?: msRest.ServiceCallback<Models.ImageCreateSummary>): Promise<Models.CreateImagesFromDataResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        imageData,\n        options\n      },\n      createImagesFromDataOperationSpec,\n      callback) as Promise<Models.CreateImagesFromDataResponse>;\n  }\n\n  /**\n   * @summary Delete images from the set of training images.\n   * @param projectId The project id.\n   * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteImages(projectId: string, imageIds: string[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param projectId The project id.\n   * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.\n   * @param callback The callback\n   */\n  deleteImages(projectId: string, imageIds: string[], callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param projectId The project id.\n   * @param imageIds Ids of the images to be deleted. Limited to 256 images per batch.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteImages(projectId: string, imageIds: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteImages(projectId: string, imageIds: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        imageIds,\n        options\n      },\n      deleteImagesOperationSpec,\n      callback);\n  }\n\n  /**\n   * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64\n   * images and 20 tags.\n   * @summary Add the provided batch of images to the set of training images.\n   * @param projectId The project id.\n   * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateImagesFromFilesResponse>\n   */\n  createImagesFromFiles(projectId: string, batch: Models.ImageFileCreateBatch, options?: msRest.RequestOptionsBase): Promise<Models.CreateImagesFromFilesResponse>;\n  /**\n   * @param projectId The project id.\n   * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.\n   * @param callback The callback\n   */\n  createImagesFromFiles(projectId: string, batch: Models.ImageFileCreateBatch, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;\n  /**\n   * @param projectId The project id.\n   * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createImagesFromFiles(projectId: string, batch: Models.ImageFileCreateBatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;\n  createImagesFromFiles(projectId: string, batch: Models.ImageFileCreateBatch, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImageCreateSummary>, callback?: msRest.ServiceCallback<Models.ImageCreateSummary>): Promise<Models.CreateImagesFromFilesResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        batch,\n        options\n      },\n      createImagesFromFilesOperationSpec,\n      callback) as Promise<Models.CreateImagesFromFilesResponse>;\n  }\n\n  /**\n   * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64\n   * images and 20 tags.\n   * @summary Add the provided images urls to the set of training images.\n   * @param projectId The project id.\n   * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateImagesFromUrlsResponse>\n   */\n  createImagesFromUrls(projectId: string, batch: Models.ImageUrlCreateBatch, options?: msRest.RequestOptionsBase): Promise<Models.CreateImagesFromUrlsResponse>;\n  /**\n   * @param projectId The project id.\n   * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.\n   * @param callback The callback\n   */\n  createImagesFromUrls(projectId: string, batch: Models.ImageUrlCreateBatch, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;\n  /**\n   * @param projectId The project id.\n   * @param batch Image urls and tag ids. Limited to 64 images and 20 tags per batch.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createImagesFromUrls(projectId: string, batch: Models.ImageUrlCreateBatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;\n  createImagesFromUrls(projectId: string, batch: Models.ImageUrlCreateBatch, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImageCreateSummary>, callback?: msRest.ServiceCallback<Models.ImageCreateSummary>): Promise<Models.CreateImagesFromUrlsResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        batch,\n        options\n      },\n      createImagesFromUrlsOperationSpec,\n      callback) as Promise<Models.CreateImagesFromUrlsResponse>;\n  }\n\n  /**\n   * This API creates a batch of images from predicted images specified. There is a limit of 64\n   * images and 20 tags.\n   * @summary Add the specified predicted images to the set of training images.\n   * @param projectId The project id.\n   * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateImagesFromPredictionsResponse>\n   */\n  createImagesFromPredictions(projectId: string, batch: Models.ImageIdCreateBatch, options?: msRest.RequestOptionsBase): Promise<Models.CreateImagesFromPredictionsResponse>;\n  /**\n   * @param projectId The project id.\n   * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.\n   * @param callback The callback\n   */\n  createImagesFromPredictions(projectId: string, batch: Models.ImageIdCreateBatch, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;\n  /**\n   * @param projectId The project id.\n   * @param batch Image and tag ids. Limited to 64 images and 20 tags per batch.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createImagesFromPredictions(projectId: string, batch: Models.ImageIdCreateBatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;\n  createImagesFromPredictions(projectId: string, batch: Models.ImageIdCreateBatch, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImageCreateSummary>, callback?: msRest.ServiceCallback<Models.ImageCreateSummary>): Promise<Models.CreateImagesFromPredictionsResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        batch,\n        options\n      },\n      createImagesFromPredictionsOperationSpec,\n      callback) as Promise<Models.CreateImagesFromPredictionsResponse>;\n  }\n\n  /**\n   * This API will get region proposals for an image along with confidences for the region. It\n   * returns an empty array if no proposals are found.\n   * @summary Get region proposals for an image. Returns empty array if no proposals are found.\n   * @param projectId The project id.\n   * @param imageId The image id.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetImageRegionProposalsResponse>\n   */\n  getImageRegionProposals(projectId: string, imageId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetImageRegionProposalsResponse>;\n  /**\n   * @param projectId The project id.\n   * @param imageId The image id.\n   * @param callback The callback\n   */\n  getImageRegionProposals(projectId: string, imageId: string, callback: msRest.ServiceCallback<Models.ImageRegionProposal>): void;\n  /**\n   * @param projectId The project id.\n   * @param imageId The image id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getImageRegionProposals(projectId: string, imageId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageRegionProposal>): void;\n  getImageRegionProposals(projectId: string, imageId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ImageRegionProposal>, callback?: msRest.ServiceCallback<Models.ImageRegionProposal>): Promise<Models.GetImageRegionProposalsResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        imageId,\n        options\n      },\n      getImageRegionProposalsOperationSpec,\n      callback) as Promise<Models.GetImageRegionProposalsResponse>;\n  }\n\n  /**\n   * @summary Delete a set of predicted images and their associated prediction results.\n   * @param projectId The project id.\n   * @param ids The prediction ids. Limited to 64.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deletePrediction(projectId: string, ids: string[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param projectId The project id.\n   * @param ids The prediction ids. Limited to 64.\n   * @param callback The callback\n   */\n  deletePrediction(projectId: string, ids: string[], callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param projectId The project id.\n   * @param ids The prediction ids. Limited to 64.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deletePrediction(projectId: string, ids: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deletePrediction(projectId: string, ids: string[], options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        ids,\n        options\n      },\n      deletePredictionOperationSpec,\n      callback);\n  }\n\n  /**\n   * @summary Quick test an image url.\n   * @param projectId The project to evaluate against.\n   * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.QuickTestImageUrlResponse>\n   */\n  quickTestImageUrl(projectId: string, imageUrl: Models.ImageUrl, options?: Models.TrainingAPIClientQuickTestImageUrlOptionalParams): Promise<Models.QuickTestImageUrlResponse>;\n  /**\n   * @param projectId The project to evaluate against.\n   * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.\n   * @param callback The callback\n   */\n  quickTestImageUrl(projectId: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  /**\n   * @param projectId The project to evaluate against.\n   * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  quickTestImageUrl(projectId: string, imageUrl: Models.ImageUrl, options: Models.TrainingAPIClientQuickTestImageUrlOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  quickTestImageUrl(projectId: string, imageUrl: Models.ImageUrl, options?: Models.TrainingAPIClientQuickTestImageUrlOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.QuickTestImageUrlResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        imageUrl,\n        options\n      },\n      quickTestImageUrlOperationSpec,\n      callback) as Promise<Models.QuickTestImageUrlResponse>;\n  }\n\n  /**\n   * @summary Quick test an image.\n   * @param projectId The project id.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 6MB.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.QuickTestImageResponse>\n   */\n  quickTestImage(projectId: string, imageData: msRest.HttpRequestBody, options?: Models.TrainingAPIClientQuickTestImageOptionalParams): Promise<Models.QuickTestImageResponse>;\n  /**\n   * @param projectId The project id.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 6MB.\n   * @param callback The callback\n   */\n  quickTestImage(projectId: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  /**\n   * @param projectId The project id.\n   * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports\n   * images up to 6MB.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  quickTestImage(projectId: string, imageData: msRest.HttpRequestBody, options: Models.TrainingAPIClientQuickTestImageOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;\n  quickTestImage(projectId: string, imageData: msRest.HttpRequestBody, options?: Models.TrainingAPIClientQuickTestImageOptionalParams | msRest.ServiceCallback<Models.ImagePrediction>, callback?: msRest.ServiceCallback<Models.ImagePrediction>): Promise<Models.QuickTestImageResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        imageData,\n        options\n      },\n      quickTestImageOperationSpec,\n      callback) as Promise<Models.QuickTestImageResponse>;\n  }\n\n  /**\n   * @summary Get images that were sent to your prediction endpoint.\n   * @param projectId The project id.\n   * @param query Parameters used to query the predictions. Limited to combining 2 tags.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.QueryPredictionsResponse>\n   */\n  queryPredictions(projectId: string, query: Models.PredictionQueryToken, options?: msRest.RequestOptionsBase): Promise<Models.QueryPredictionsResponse>;\n  /**\n   * @param projectId The project id.\n   * @param query Parameters used to query the predictions. Limited to combining 2 tags.\n   * @param callback The callback\n   */\n  queryPredictions(projectId: string, query: Models.PredictionQueryToken, callback: msRest.ServiceCallback<Models.PredictionQueryResult>): void;\n  /**\n   * @param projectId The project id.\n   * @param query Parameters used to query the predictions. Limited to combining 2 tags.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  queryPredictions(projectId: string, query: Models.PredictionQueryToken, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PredictionQueryResult>): void;\n  queryPredictions(projectId: string, query: Models.PredictionQueryToken, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PredictionQueryResult>, callback?: msRest.ServiceCallback<Models.PredictionQueryResult>): Promise<Models.QueryPredictionsResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        query,\n        options\n      },\n      queryPredictionsOperationSpec,\n      callback) as Promise<Models.QueryPredictionsResponse>;\n  }\n\n  /**\n   * @summary Get detailed performance information about an iteration.\n   * @param projectId The id of the project the iteration belongs to.\n   * @param iterationId The id of the iteration to get.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetIterationPerformanceResponse>\n   */\n  getIterationPerformance(projectId: string, iterationId: string, options?: Models.TrainingAPIClientGetIterationPerformanceOptionalParams): Promise<Models.GetIterationPerformanceResponse>;\n  /**\n   * @param projectId The id of the project the iteration belongs to.\n   * @param iterationId The id of the iteration to get.\n   * @param callback The callback\n   */\n  getIterationPerformance(projectId: string, iterationId: string, callback: msRest.ServiceCallback<Models.IterationPerformance>): void;\n  /**\n   * @param projectId The id of the project the iteration belongs to.\n   * @param iterationId The id of the iteration to get.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getIterationPerformance(projectId: string, iterationId: string, options: Models.TrainingAPIClientGetIterationPerformanceOptionalParams, callback: msRest.ServiceCallback<Models.IterationPerformance>): void;\n  getIterationPerformance(projectId: string, iterationId: string, options?: Models.TrainingAPIClientGetIterationPerformanceOptionalParams | msRest.ServiceCallback<Models.IterationPerformance>, callback?: msRest.ServiceCallback<Models.IterationPerformance>): Promise<Models.GetIterationPerformanceResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        iterationId,\n        options\n      },\n      getIterationPerformanceOperationSpec,\n      callback) as Promise<Models.GetIterationPerformanceResponse>;\n  }\n\n  /**\n   * This API supports batching and range selection. By default it will only return first 50 images\n   * matching images.\n   * Use the {take} and {skip} parameters to control how many images to return in a given batch.\n   * The filtering is on an and/or relationship. For example, if the provided tag ids are for the\n   * \"Dog\" and\n   * \"Cat\" tags, then only images tagged with Dog and/or Cat will be returned\n   * @summary Get image with its prediction for a given project iteration.\n   * @param projectId The project id.\n   * @param iterationId The iteration id. Defaults to workspace.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetImagePerformancesResponse>\n   */\n  getImagePerformances(projectId: string, iterationId: string, options?: Models.TrainingAPIClientGetImagePerformancesOptionalParams): Promise<Models.GetImagePerformancesResponse>;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id. Defaults to workspace.\n   * @param callback The callback\n   */\n  getImagePerformances(projectId: string, iterationId: string, callback: msRest.ServiceCallback<Models.ImagePerformance[]>): void;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id. Defaults to workspace.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getImagePerformances(projectId: string, iterationId: string, options: Models.TrainingAPIClientGetImagePerformancesOptionalParams, callback: msRest.ServiceCallback<Models.ImagePerformance[]>): void;\n  getImagePerformances(projectId: string, iterationId: string, options?: Models.TrainingAPIClientGetImagePerformancesOptionalParams | msRest.ServiceCallback<Models.ImagePerformance[]>, callback?: msRest.ServiceCallback<Models.ImagePerformance[]>): Promise<Models.GetImagePerformancesResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        iterationId,\n        options\n      },\n      getImagePerformancesOperationSpec,\n      callback) as Promise<Models.GetImagePerformancesResponse>;\n  }\n\n  /**\n   * The filtering is on an and/or relationship. For example, if the provided tag ids are for the\n   * \"Dog\" and\n   * \"Cat\" tags, then only images tagged with Dog and/or Cat will be returned\n   * @summary Gets the number of images tagged with the provided {tagIds} that have prediction\n   * results from\n   * training for the provided iteration {iterationId}.\n   * @param projectId The project id.\n   * @param iterationId The iteration id. Defaults to workspace.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetImagePerformanceCountResponse>\n   */\n  getImagePerformanceCount(projectId: string, iterationId: string, options?: Models.TrainingAPIClientGetImagePerformanceCountOptionalParams): Promise<Models.GetImagePerformanceCountResponse>;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id. Defaults to workspace.\n   * @param callback The callback\n   */\n  getImagePerformanceCount(projectId: string, iterationId: string, callback: msRest.ServiceCallback<number>): void;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id. Defaults to workspace.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getImagePerformanceCount(projectId: string, iterationId: string, options: Models.TrainingAPIClientGetImagePerformanceCountOptionalParams, callback: msRest.ServiceCallback<number>): void;\n  getImagePerformanceCount(projectId: string, iterationId: string, options?: Models.TrainingAPIClientGetImagePerformanceCountOptionalParams | msRest.ServiceCallback<number>, callback?: msRest.ServiceCallback<number>): Promise<Models.GetImagePerformanceCountResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        iterationId,\n        options\n      },\n      getImagePerformanceCountOperationSpec,\n      callback) as Promise<Models.GetImagePerformanceCountResponse>;\n  }\n\n  /**\n   * @summary Get your projects.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetProjectsResponse>\n   */\n  getProjects(options?: msRest.RequestOptionsBase): Promise<Models.GetProjectsResponse>;\n  /**\n   * @param callback The callback\n   */\n  getProjects(callback: msRest.ServiceCallback<Models.Project[]>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProjects(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Project[]>): void;\n  getProjects(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Project[]>, callback?: msRest.ServiceCallback<Models.Project[]>): Promise<Models.GetProjectsResponse> {\n    return this.sendOperationRequest(\n      {\n        options\n      },\n      getProjectsOperationSpec,\n      callback) as Promise<Models.GetProjectsResponse>;\n  }\n\n  /**\n   * @summary Create a project.\n   * @param name Name of the project.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateProjectResponse>\n   */\n  createProject(name: string, options?: Models.TrainingAPIClientCreateProjectOptionalParams): Promise<Models.CreateProjectResponse>;\n  /**\n   * @param name Name of the project.\n   * @param callback The callback\n   */\n  createProject(name: string, callback: msRest.ServiceCallback<Models.Project>): void;\n  /**\n   * @param name Name of the project.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createProject(name: string, options: Models.TrainingAPIClientCreateProjectOptionalParams, callback: msRest.ServiceCallback<Models.Project>): void;\n  createProject(name: string, options?: Models.TrainingAPIClientCreateProjectOptionalParams | msRest.ServiceCallback<Models.Project>, callback?: msRest.ServiceCallback<Models.Project>): Promise<Models.CreateProjectResponse> {\n    return this.sendOperationRequest(\n      {\n        name,\n        options\n      },\n      createProjectOperationSpec,\n      callback) as Promise<Models.CreateProjectResponse>;\n  }\n\n  /**\n   * @summary Get a specific project.\n   * @param projectId The id of the project to get.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetProjectResponse>\n   */\n  getProject(projectId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetProjectResponse>;\n  /**\n   * @param projectId The id of the project to get.\n   * @param callback The callback\n   */\n  getProject(projectId: string, callback: msRest.ServiceCallback<Models.Project>): void;\n  /**\n   * @param projectId The id of the project to get.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getProject(projectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Project>): void;\n  getProject(projectId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Project>, callback?: msRest.ServiceCallback<Models.Project>): Promise<Models.GetProjectResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        options\n      },\n      getProjectOperationSpec,\n      callback) as Promise<Models.GetProjectResponse>;\n  }\n\n  /**\n   * @summary Delete a specific project.\n   * @param projectId The project id.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteProject(projectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param projectId The project id.\n   * @param callback The callback\n   */\n  deleteProject(projectId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param projectId The project id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteProject(projectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteProject(projectId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        options\n      },\n      deleteProjectOperationSpec,\n      callback);\n  }\n\n  /**\n   * @summary Update a specific project.\n   * @param projectId The id of the project to update.\n   * @param updatedProject The updated project model.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateProjectResponse>\n   */\n  updateProject(projectId: string, updatedProject: Models.Project, options?: msRest.RequestOptionsBase): Promise<Models.UpdateProjectResponse>;\n  /**\n   * @param projectId The id of the project to update.\n   * @param updatedProject The updated project model.\n   * @param callback The callback\n   */\n  updateProject(projectId: string, updatedProject: Models.Project, callback: msRest.ServiceCallback<Models.Project>): void;\n  /**\n   * @param projectId The id of the project to update.\n   * @param updatedProject The updated project model.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateProject(projectId: string, updatedProject: Models.Project, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Project>): void;\n  updateProject(projectId: string, updatedProject: Models.Project, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Project>, callback?: msRest.ServiceCallback<Models.Project>): Promise<Models.UpdateProjectResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        updatedProject,\n        options\n      },\n      updateProjectOperationSpec,\n      callback) as Promise<Models.UpdateProjectResponse>;\n  }\n\n  /**\n   * @summary Queues project for training.\n   * @param projectId The project id.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.TrainProjectResponse>\n   */\n  trainProject(projectId: string, options?: Models.TrainingAPIClientTrainProjectOptionalParams): Promise<Models.TrainProjectResponse>;\n  /**\n   * @param projectId The project id.\n   * @param callback The callback\n   */\n  trainProject(projectId: string, callback: msRest.ServiceCallback<Models.Iteration>): void;\n  /**\n   * @param projectId The project id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  trainProject(projectId: string, options: Models.TrainingAPIClientTrainProjectOptionalParams, callback: msRest.ServiceCallback<Models.Iteration>): void;\n  trainProject(projectId: string, options?: Models.TrainingAPIClientTrainProjectOptionalParams | msRest.ServiceCallback<Models.Iteration>, callback?: msRest.ServiceCallback<Models.Iteration>): Promise<Models.TrainProjectResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        options\n      },\n      trainProjectOperationSpec,\n      callback) as Promise<Models.TrainProjectResponse>;\n  }\n\n  /**\n   * @summary Get iterations for the project.\n   * @param projectId The project id.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetIterationsResponse>\n   */\n  getIterations(projectId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetIterationsResponse>;\n  /**\n   * @param projectId The project id.\n   * @param callback The callback\n   */\n  getIterations(projectId: string, callback: msRest.ServiceCallback<Models.Iteration[]>): void;\n  /**\n   * @param projectId The project id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getIterations(projectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Iteration[]>): void;\n  getIterations(projectId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Iteration[]>, callback?: msRest.ServiceCallback<Models.Iteration[]>): Promise<Models.GetIterationsResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        options\n      },\n      getIterationsOperationSpec,\n      callback) as Promise<Models.GetIterationsResponse>;\n  }\n\n  /**\n   * @summary Get a specific iteration.\n   * @param projectId The id of the project the iteration belongs to.\n   * @param iterationId The id of the iteration to get.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetIterationResponse>\n   */\n  getIteration(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetIterationResponse>;\n  /**\n   * @param projectId The id of the project the iteration belongs to.\n   * @param iterationId The id of the iteration to get.\n   * @param callback The callback\n   */\n  getIteration(projectId: string, iterationId: string, callback: msRest.ServiceCallback<Models.Iteration>): void;\n  /**\n   * @param projectId The id of the project the iteration belongs to.\n   * @param iterationId The id of the iteration to get.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getIteration(projectId: string, iterationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Iteration>): void;\n  getIteration(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Iteration>, callback?: msRest.ServiceCallback<Models.Iteration>): Promise<Models.GetIterationResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        iterationId,\n        options\n      },\n      getIterationOperationSpec,\n      callback) as Promise<Models.GetIterationResponse>;\n  }\n\n  /**\n   * @summary Delete a specific iteration of a project.\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteIteration(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param callback The callback\n   */\n  deleteIteration(projectId: string, iterationId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteIteration(projectId: string, iterationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteIteration(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        iterationId,\n        options\n      },\n      deleteIterationOperationSpec,\n      callback);\n  }\n\n  /**\n   * @summary Update a specific iteration.\n   * @param projectId Project id.\n   * @param iterationId Iteration id.\n   * @param updatedIteration The updated iteration model.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateIterationResponse>\n   */\n  updateIteration(projectId: string, iterationId: string, updatedIteration: Models.Iteration, options?: msRest.RequestOptionsBase): Promise<Models.UpdateIterationResponse>;\n  /**\n   * @param projectId Project id.\n   * @param iterationId Iteration id.\n   * @param updatedIteration The updated iteration model.\n   * @param callback The callback\n   */\n  updateIteration(projectId: string, iterationId: string, updatedIteration: Models.Iteration, callback: msRest.ServiceCallback<Models.Iteration>): void;\n  /**\n   * @param projectId Project id.\n   * @param iterationId Iteration id.\n   * @param updatedIteration The updated iteration model.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateIteration(projectId: string, iterationId: string, updatedIteration: Models.Iteration, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Iteration>): void;\n  updateIteration(projectId: string, iterationId: string, updatedIteration: Models.Iteration, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Iteration>, callback?: msRest.ServiceCallback<Models.Iteration>): Promise<Models.UpdateIterationResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        iterationId,\n        updatedIteration,\n        options\n      },\n      updateIterationOperationSpec,\n      callback) as Promise<Models.UpdateIterationResponse>;\n  }\n\n  /**\n   * @summary Publish a specific iteration.\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param publishName The name to give the published iteration.\n   * @param predictionId The id of the prediction resource to publish to.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.PublishIterationResponse>\n   */\n  publishIteration(projectId: string, iterationId: string, publishName: string, predictionId: string, options?: msRest.RequestOptionsBase): Promise<Models.PublishIterationResponse>;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param publishName The name to give the published iteration.\n   * @param predictionId The id of the prediction resource to publish to.\n   * @param callback The callback\n   */\n  publishIteration(projectId: string, iterationId: string, publishName: string, predictionId: string, callback: msRest.ServiceCallback<boolean>): void;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param publishName The name to give the published iteration.\n   * @param predictionId The id of the prediction resource to publish to.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  publishIteration(projectId: string, iterationId: string, publishName: string, predictionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;\n  publishIteration(projectId: string, iterationId: string, publishName: string, predictionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.PublishIterationResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        iterationId,\n        publishName,\n        predictionId,\n        options\n      },\n      publishIterationOperationSpec,\n      callback) as Promise<Models.PublishIterationResponse>;\n  }\n\n  /**\n   * @summary Unpublish a specific iteration.\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  unpublishIteration(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param callback The callback\n   */\n  unpublishIteration(projectId: string, iterationId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  unpublishIteration(projectId: string, iterationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  unpublishIteration(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        iterationId,\n        options\n      },\n      unpublishIterationOperationSpec,\n      callback);\n  }\n\n  /**\n   * @summary Get the list of exports for a specific iteration.\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetExportsResponse>\n   */\n  getExports(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetExportsResponse>;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param callback The callback\n   */\n  getExports(projectId: string, iterationId: string, callback: msRest.ServiceCallback<Models.ExportModel[]>): void;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getExports(projectId: string, iterationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExportModel[]>): void;\n  getExports(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExportModel[]>, callback?: msRest.ServiceCallback<Models.ExportModel[]>): Promise<Models.GetExportsResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        iterationId,\n        options\n      },\n      getExportsOperationSpec,\n      callback) as Promise<Models.GetExportsResponse>;\n  }\n\n  /**\n   * @summary Export a trained iteration.\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow',\n   * 'DockerFile', 'ONNX', 'VAIDK'\n   * @param [options] The optional parameters\n   * @returns Promise<Models.ExportIterationResponse>\n   */\n  exportIteration(projectId: string, iterationId: string, platform: Models.Platform, options?: Models.TrainingAPIClientExportIterationOptionalParams): Promise<Models.ExportIterationResponse>;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow',\n   * 'DockerFile', 'ONNX', 'VAIDK'\n   * @param callback The callback\n   */\n  exportIteration(projectId: string, iterationId: string, platform: Models.Platform, callback: msRest.ServiceCallback<Models.ExportModel>): void;\n  /**\n   * @param projectId The project id.\n   * @param iterationId The iteration id.\n   * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow',\n   * 'DockerFile', 'ONNX', 'VAIDK'\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  exportIteration(projectId: string, iterationId: string, platform: Models.Platform, options: Models.TrainingAPIClientExportIterationOptionalParams, callback: msRest.ServiceCallback<Models.ExportModel>): void;\n  exportIteration(projectId: string, iterationId: string, platform: Models.Platform, options?: Models.TrainingAPIClientExportIterationOptionalParams | msRest.ServiceCallback<Models.ExportModel>, callback?: msRest.ServiceCallback<Models.ExportModel>): Promise<Models.ExportIterationResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        iterationId,\n        platform,\n        options\n      },\n      exportIterationOperationSpec,\n      callback) as Promise<Models.ExportIterationResponse>;\n  }\n\n  /**\n   * @summary Get information about a specific tag.\n   * @param projectId The project this tag belongs to.\n   * @param tagId The tag id.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetTagResponse>\n   */\n  getTag(projectId: string, tagId: string, options?: Models.TrainingAPIClientGetTagOptionalParams): Promise<Models.GetTagResponse>;\n  /**\n   * @param projectId The project this tag belongs to.\n   * @param tagId The tag id.\n   * @param callback The callback\n   */\n  getTag(projectId: string, tagId: string, callback: msRest.ServiceCallback<Models.Tag>): void;\n  /**\n   * @param projectId The project this tag belongs to.\n   * @param tagId The tag id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getTag(projectId: string, tagId: string, options: Models.TrainingAPIClientGetTagOptionalParams, callback: msRest.ServiceCallback<Models.Tag>): void;\n  getTag(projectId: string, tagId: string, options?: Models.TrainingAPIClientGetTagOptionalParams | msRest.ServiceCallback<Models.Tag>, callback?: msRest.ServiceCallback<Models.Tag>): Promise<Models.GetTagResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        tagId,\n        options\n      },\n      getTagOperationSpec,\n      callback) as Promise<Models.GetTagResponse>;\n  }\n\n  /**\n   * @summary Delete a tag from the project.\n   * @param projectId The project id.\n   * @param tagId Id of the tag to be deleted.\n   * @param [options] The optional parameters\n   * @returns Promise<msRest.RestResponse>\n   */\n  deleteTag(projectId: string, tagId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;\n  /**\n   * @param projectId The project id.\n   * @param tagId Id of the tag to be deleted.\n   * @param callback The callback\n   */\n  deleteTag(projectId: string, tagId: string, callback: msRest.ServiceCallback<void>): void;\n  /**\n   * @param projectId The project id.\n   * @param tagId Id of the tag to be deleted.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteTag(projectId: string, tagId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;\n  deleteTag(projectId: string, tagId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        tagId,\n        options\n      },\n      deleteTagOperationSpec,\n      callback);\n  }\n\n  /**\n   * @summary Update a tag.\n   * @param projectId The project id.\n   * @param tagId The id of the target tag.\n   * @param updatedTag The updated tag model.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateTagResponse>\n   */\n  updateTag(projectId: string, tagId: string, updatedTag: Models.Tag, options?: msRest.RequestOptionsBase): Promise<Models.UpdateTagResponse>;\n  /**\n   * @param projectId The project id.\n   * @param tagId The id of the target tag.\n   * @param updatedTag The updated tag model.\n   * @param callback The callback\n   */\n  updateTag(projectId: string, tagId: string, updatedTag: Models.Tag, callback: msRest.ServiceCallback<Models.Tag>): void;\n  /**\n   * @param projectId The project id.\n   * @param tagId The id of the target tag.\n   * @param updatedTag The updated tag model.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateTag(projectId: string, tagId: string, updatedTag: Models.Tag, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Tag>): void;\n  updateTag(projectId: string, tagId: string, updatedTag: Models.Tag, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Tag>, callback?: msRest.ServiceCallback<Models.Tag>): Promise<Models.UpdateTagResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        tagId,\n        updatedTag,\n        options\n      },\n      updateTagOperationSpec,\n      callback) as Promise<Models.UpdateTagResponse>;\n  }\n\n  /**\n   * @summary Get the tags for a given project and iteration.\n   * @param projectId The project id.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetTagsResponse>\n   */\n  getTags(projectId: string, options?: Models.TrainingAPIClientGetTagsOptionalParams): Promise<Models.GetTagsResponse>;\n  /**\n   * @param projectId The project id.\n   * @param callback The callback\n   */\n  getTags(projectId: string, callback: msRest.ServiceCallback<Models.Tag[]>): void;\n  /**\n   * @param projectId The project id.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getTags(projectId: string, options: Models.TrainingAPIClientGetTagsOptionalParams, callback: msRest.ServiceCallback<Models.Tag[]>): void;\n  getTags(projectId: string, options?: Models.TrainingAPIClientGetTagsOptionalParams | msRest.ServiceCallback<Models.Tag[]>, callback?: msRest.ServiceCallback<Models.Tag[]>): Promise<Models.GetTagsResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        options\n      },\n      getTagsOperationSpec,\n      callback) as Promise<Models.GetTagsResponse>;\n  }\n\n  /**\n   * @summary Create a tag for the project.\n   * @param projectId The project id.\n   * @param name The tag name.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.CreateTagResponse>\n   */\n  createTag(projectId: string, name: string, options?: Models.TrainingAPIClientCreateTagOptionalParams): Promise<Models.CreateTagResponse>;\n  /**\n   * @param projectId The project id.\n   * @param name The tag name.\n   * @param callback The callback\n   */\n  createTag(projectId: string, name: string, callback: msRest.ServiceCallback<Models.Tag>): void;\n  /**\n   * @param projectId The project id.\n   * @param name The tag name.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  createTag(projectId: string, name: string, options: Models.TrainingAPIClientCreateTagOptionalParams, callback: msRest.ServiceCallback<Models.Tag>): void;\n  createTag(projectId: string, name: string, options?: Models.TrainingAPIClientCreateTagOptionalParams | msRest.ServiceCallback<Models.Tag>, callback?: msRest.ServiceCallback<Models.Tag>): Promise<Models.CreateTagResponse> {\n    return this.sendOperationRequest(\n      {\n        projectId,\n        name,\n        options\n      },\n      createTagOperationSpec,\n      callback) as Promise<Models.CreateTagResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst getDomainsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"domains\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Domain\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getDomainOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"domains/{domainId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.domainId0\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Domain\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getTaggedImageCountOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/images/tagged/count\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.iterationId0,\n    Parameters.tagIds0\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getUntaggedImageCountOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/images/untagged/count\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.iterationId0\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst createImageTagsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/images/tags\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"batch\",\n    mapper: {\n      ...Mappers.ImageTagCreateBatch,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageTagCreateSummary\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst deleteImageTagsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"projects/{projectId}/images/tags\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.imageIds0,\n    Parameters.tagIds1\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst createImageRegionsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/images/regions\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"batch\",\n    mapper: {\n      ...Mappers.ImageRegionCreateBatch,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageRegionCreateSummary\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst deleteImageRegionsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"projects/{projectId}/images/regions\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.regionIds\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getTaggedImagesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/images/tagged\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.iterationId0,\n    Parameters.tagIds2,\n    Parameters.orderBy,\n    Parameters.take,\n    Parameters.skip\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Image\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getUntaggedImagesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/images/untagged\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.iterationId0,\n    Parameters.orderBy,\n    Parameters.take,\n    Parameters.skip\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Image\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getImagesByIdsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/images/id\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.imageIds1,\n    Parameters.iterationId0\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Image\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst createImagesFromDataOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/images\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.tagIds2\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  formDataParameters: [\n    Parameters.imageData\n  ],\n  contentType: \"multipart/form-data\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageCreateSummary\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst deleteImagesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"projects/{projectId}/images\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.imageIds2\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst createImagesFromFilesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/images/files\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"batch\",\n    mapper: {\n      ...Mappers.ImageFileCreateBatch,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageCreateSummary\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst createImagesFromUrlsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/images/urls\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"batch\",\n    mapper: {\n      ...Mappers.ImageUrlCreateBatch,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageCreateSummary\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst createImagesFromPredictionsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/images/predictions\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"batch\",\n    mapper: {\n      ...Mappers.ImageIdCreateBatch,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageCreateSummary\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getImageRegionProposalsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/images/{imageId}/regionproposals\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.imageId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImageRegionProposal\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst deletePredictionOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"projects/{projectId}/predictions\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.ids\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst quickTestImageUrlOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/quicktest/url\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.iterationId0\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"imageUrl\",\n    mapper: {\n      ...Mappers.ImageUrl,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImagePrediction\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst quickTestImageOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/quicktest/image\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.iterationId0\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  formDataParameters: [\n    Parameters.imageData\n  ],\n  contentType: \"multipart/form-data\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImagePrediction\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst queryPredictionsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/predictions/query\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"query\",\n    mapper: {\n      ...Mappers.PredictionQueryToken,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.PredictionQueryResult\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getIterationPerformanceOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/iterations/{iterationId}/performance\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.iterationId1\n  ],\n  queryParameters: [\n    Parameters.threshold,\n    Parameters.overlapThreshold\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.IterationPerformance\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getImagePerformancesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/iterations/{iterationId}/performance/images\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.iterationId1\n  ],\n  queryParameters: [\n    Parameters.tagIds2,\n    Parameters.orderBy,\n    Parameters.take,\n    Parameters.skip\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImagePerformance\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getImagePerformanceCountOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/iterations/{iterationId}/performance/images/count\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.iterationId1\n  ],\n  queryParameters: [\n    Parameters.tagIds0\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getProjectsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Project\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst createProjectOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.name,\n    Parameters.description,\n    Parameters.domainId1,\n    Parameters.classificationType,\n    Parameters.targetExportPlatforms\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Project\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getProjectOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Project\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst deleteProjectOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"projects/{projectId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst updateProjectOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"projects/{projectId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"updatedProject\",\n    mapper: {\n      ...Mappers.Project,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.Project\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst trainProjectOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/train\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.trainingType,\n    Parameters.reservedBudgetInHours,\n    Parameters.forceTrain,\n    Parameters.notificationEmailAddress\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Iteration\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getIterationsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/iterations\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Iteration\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getIterationOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/iterations/{iterationId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.iterationId1\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Iteration\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst deleteIterationOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"projects/{projectId}/iterations/{iterationId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.iterationId1\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst updateIterationOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"projects/{projectId}/iterations/{iterationId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.iterationId1\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"updatedIteration\",\n    mapper: {\n      ...Mappers.Iteration,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.Iteration\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst publishIterationOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/iterations/{iterationId}/publish\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.iterationId1\n  ],\n  queryParameters: [\n    Parameters.publishName,\n    Parameters.predictionId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst unpublishIterationOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"projects/{projectId}/iterations/{iterationId}/publish\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.iterationId1\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getExportsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/iterations/{iterationId}/export\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.iterationId1\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ExportModel\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst exportIterationOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/iterations/{iterationId}/export\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.iterationId1\n  ],\n  queryParameters: [\n    Parameters.platform,\n    Parameters.flavor\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.ExportModel\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getTagOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/tags/{tagId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.tagId\n  ],\n  queryParameters: [\n    Parameters.iterationId0\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Tag\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst deleteTagOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"projects/{projectId}/tags/{tagId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.tagId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst updateTagOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"projects/{projectId}/tags/{tagId}\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId,\n    Parameters.tagId\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  requestBody: {\n    parameterPath: \"updatedTag\",\n    mapper: {\n      ...Mappers.Tag,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.Tag\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst getTagsOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"projects/{projectId}/tags\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.iterationId0\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: {\n        serializedName: \"parsedResponse\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Tag\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nconst createTagOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"projects/{projectId}/tags\",\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.projectId\n  ],\n  queryParameters: [\n    Parameters.name,\n    Parameters.description,\n    Parameters.type\n  ],\n  headerParameters: [\n    Parameters.apiKey\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.Tag\n    },\n    default: {\n      bodyMapper: Mappers.CustomVisionError\n    }\n  },\n  serializer\n};\n\nexport {\n  TrainingAPIClient,\n  TrainingAPIClientContext,\n  Models as TrainingAPIModels,\n  Mappers as TrainingAPIMappers\n};\n"],"names":["msRest.QueryCollectionFormat","msRest.getDefaultUserAgentValue","msRest.ServiceClient","msRest.Serializer","Parameters.endpoint","Parameters.apiKey","Mappers.CustomVisionError","Parameters.domainId0","Mappers.Domain","Parameters.projectId","Parameters.iterationId0","Parameters.tagIds0","Mappers.ImageTagCreateBatch","Mappers.ImageTagCreateSummary","Parameters.imageIds0","Parameters.tagIds1","Mappers.ImageRegionCreateBatch","Mappers.ImageRegionCreateSummary","Parameters.regionIds","Parameters.tagIds2","Parameters.orderBy","Parameters.take","Parameters.skip","Parameters.imageIds1","Parameters.imageData","Mappers.ImageCreateSummary","Parameters.imageIds2","Mappers.ImageFileCreateBatch","Mappers.ImageUrlCreateBatch","Mappers.ImageIdCreateBatch","Parameters.imageId","Mappers.ImageRegionProposal","Parameters.ids","Mappers.ImageUrl","Mappers.ImagePrediction","Mappers.PredictionQueryToken","Mappers.PredictionQueryResult","Parameters.iterationId1","Parameters.threshold","Parameters.overlapThreshold","Mappers.IterationPerformance","Parameters.name","Parameters.description","Parameters.domainId1","Parameters.classificationType","Parameters.targetExportPlatforms","Mappers.Project","Parameters.trainingType","Parameters.reservedBudgetInHours","Parameters.forceTrain","Parameters.notificationEmailAddress","Mappers.Iteration","Parameters.publishName","Parameters.predictionId","Parameters.platform","Parameters.flavor","Mappers.ExportModel","Parameters.tagId","Mappers.Tag","Parameters.type"],"mappings":"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"}