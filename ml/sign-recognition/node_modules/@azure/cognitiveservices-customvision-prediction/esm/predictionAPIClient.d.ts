import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { PredictionAPIClientContext } from "./predictionAPIClientContext";
declare class PredictionAPIClient extends PredictionAPIClientContext {
    /**
     * Initializes a new instance of the PredictionAPIClient class.
     * @param apiKey API key.
     * @param endpoint Supported Cognitive Services endpoints.
     * @param [options] The parameter options
     */
    constructor(apiKey: string, endpoint: string, options?: msRest.ServiceClientOptions);
    /**
     * @summary Classify an image url and saves the result.
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.
     * @param [options] The optional parameters
     * @returns Promise<Models.ClassifyImageUrlResponse>
     */
    classifyImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientClassifyImageUrlOptionalParams): Promise<Models.ClassifyImageUrlResponse>;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.
     * @param callback The callback
     */
    classifyImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.
     * @param options The optional parameters
     * @param callback The callback
     */
    classifyImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientClassifyImageUrlOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @summary Classify an image and saves the result.
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 4MB.
     * @param [options] The optional parameters
     * @returns Promise<Models.ClassifyImageResponse>
     */
    classifyImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientClassifyImageOptionalParams): Promise<Models.ClassifyImageResponse>;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 4MB.
     * @param callback The callback
     */
    classifyImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 4MB.
     * @param options The optional parameters
     * @param callback The callback
     */
    classifyImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientClassifyImageOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @summary Classify an image url without saving the result.
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
     * evaluated.
     * @param [options] The optional parameters
     * @returns Promise<Models.ClassifyImageUrlWithNoStoreResponse>
     */
    classifyImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientClassifyImageUrlWithNoStoreOptionalParams): Promise<Models.ClassifyImageUrlWithNoStoreResponse>;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
     * evaluated.
     * @param callback The callback
     */
    classifyImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
     * evaluated.
     * @param options The optional parameters
     * @param callback The callback
     */
    classifyImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientClassifyImageUrlWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @summary Classify an image without saving the result.
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 0MB.
     * @param [options] The optional parameters
     * @returns Promise<Models.ClassifyImageWithNoStoreResponse>
     */
    classifyImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientClassifyImageWithNoStoreOptionalParams): Promise<Models.ClassifyImageWithNoStoreResponse>;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 0MB.
     * @param callback The callback
     */
    classifyImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 0MB.
     * @param options The optional parameters
     * @param callback The callback
     */
    classifyImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientClassifyImageWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @summary Detect objects in an image url and saves the result.
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.
     * @param [options] The optional parameters
     * @returns Promise<Models.DetectImageUrlResponse>
     */
    detectImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientDetectImageUrlOptionalParams): Promise<Models.DetectImageUrlResponse>;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.
     * @param callback The callback
     */
    detectImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.
     * @param options The optional parameters
     * @param callback The callback
     */
    detectImageUrl(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientDetectImageUrlOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @summary Detect objects in an image and saves the result.
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 4MB.
     * @param [options] The optional parameters
     * @returns Promise<Models.DetectImageResponse>
     */
    detectImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientDetectImageOptionalParams): Promise<Models.DetectImageResponse>;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 4MB.
     * @param callback The callback
     */
    detectImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 4MB.
     * @param options The optional parameters
     * @param callback The callback
     */
    detectImage(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientDetectImageOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @summary Detect objects in an image url without saving the result.
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
     * evaluated.
     * @param [options] The optional parameters
     * @returns Promise<Models.DetectImageUrlWithNoStoreResponse>
     */
    detectImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options?: Models.PredictionAPIClientDetectImageUrlWithNoStoreOptionalParams): Promise<Models.DetectImageUrlWithNoStoreResponse>;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
     * evaluated.
     * @param callback The callback
     */
    detectImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be
     * evaluated.
     * @param options The optional parameters
     * @param callback The callback
     */
    detectImageUrlWithNoStore(projectId: string, publishedName: string, imageUrl: Models.ImageUrl, options: Models.PredictionAPIClientDetectImageUrlWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @summary Detect objects in an image without saving the result.
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 0MB.
     * @param [options] The optional parameters
     * @returns Promise<Models.DetectImageWithNoStoreResponse>
     */
    detectImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options?: Models.PredictionAPIClientDetectImageWithNoStoreOptionalParams): Promise<Models.DetectImageWithNoStoreResponse>;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 0MB.
     * @param callback The callback
     */
    detectImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @param projectId The project id.
     * @param publishedName Specifies the name of the model to evaluate against.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 0MB.
     * @param options The optional parameters
     * @param callback The callback
     */
    detectImageWithNoStore(projectId: string, publishedName: string, imageData: msRest.HttpRequestBody, options: Models.PredictionAPIClientDetectImageWithNoStoreOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
}
export { PredictionAPIClient, PredictionAPIClientContext, Models as PredictionAPIModels, Mappers as PredictionAPIMappers };
//# sourceMappingURL=predictionAPIClient.d.ts.map